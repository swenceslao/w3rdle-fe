{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/ERC20.sol",
    "10": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/Context.sol",
    "16": "contracts/W3rdl3.sol",
    "2": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/IERC20.sol",
    "3": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/extensions/IERC20Metadata.sol"
  },
  "ast": {
    "absolutePath": "contracts/W3rdl3.sol",
    "exportedSymbols": {
      "Address": [
        2990
      ],
      "Context": [
        2431
      ],
      "ContextMixin": [
        2210
      ],
      "Counters": [
        2169
      ],
      "EIP712Base": [
        3645
      ],
      "ERC165": [
        3217
      ],
      "ERC20": [
        1101
      ],
      "ERC721": [
        1967
      ],
      "ERC721URIStorage": [
        2095
      ],
      "IERC165": [
        3657
      ],
      "IERC20": [
        2509
      ],
      "IERC20Metadata": [
        2534
      ],
      "IERC721": [
        2650
      ],
      "IERC721Metadata": [
        2695
      ],
      "IERC721Receiver": [
        2668
      ],
      "NativeMetaTransaction": [
        2409
      ],
      "Ownable": [
        513
      ],
      "OwnableDelegateProxy": [
        9
      ],
      "ProxyRegistry": [
        15
      ],
      "SafeMath": [
        3529
      ],
      "Strings": [
        3193
      ],
      "W3rdl3": [
        408
      ],
      "Weth": [
        40
      ],
      "deployed": [
        53
      ]
    },
    "id": 409,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:16"
      },
      {
        "absolutePath": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 409,
        "sourceUnit": 1102,
        "src": "58:55:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC721/ERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
        "id": 3,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 409,
        "sourceUnit": 1968,
        "src": "114:57:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/token/ERC721/extensions/ERC721URIStorage.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol",
        "id": 4,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 409,
        "sourceUnit": 2096,
        "src": "172:78:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/Counters.sol",
        "file": "@openzeppelin/contracts/utils/Counters.sol",
        "id": 5,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 409,
        "sourceUnit": 2170,
        "src": "251:52:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/rigo/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 6,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 409,
        "sourceUnit": 514,
        "src": "304:52:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/common/meta-transactions/ContentMixin.sol",
        "file": "./common/meta-transactions/ContentMixin.sol",
        "id": 7,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 409,
        "sourceUnit": 2211,
        "src": "358:53:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/common/meta-transactions/NativeMetaTransaction.sol",
        "file": "./common/meta-transactions/NativeMetaTransaction.sol",
        "id": 8,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 409,
        "sourceUnit": 2410,
        "src": "412:62:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "OwnableDelegateProxy",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 9,
        "linearizedBaseContracts": [
          9
        ],
        "name": "OwnableDelegateProxy",
        "nameLocation": "485:20:16",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 409,
        "src": "476:32:16",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ProxyRegistry",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 15,
        "linearizedBaseContracts": [
          15
        ],
        "name": "ProxyRegistry",
        "nameLocation": "519:13:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "c4552791",
            "id": 14,
            "mutability": "mutable",
            "name": "proxies",
            "nameLocation": "587:7:16",
            "nodeType": "VariableDeclaration",
            "scope": 15,
            "src": "539:55:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_contract$_OwnableDelegateProxy_$9_$",
              "typeString": "mapping(address => contract OwnableDelegateProxy)"
            },
            "typeName": {
              "id": 13,
              "keyType": {
                "id": 10,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "547:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "539:40:16",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_contract$_OwnableDelegateProxy_$9_$",
                "typeString": "mapping(address => contract OwnableDelegateProxy)"
              },
              "valueType": {
                "id": 12,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 11,
                  "name": "OwnableDelegateProxy",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 9,
                  "src": "558:20:16"
                },
                "referencedDeclaration": 9,
                "src": "558:20:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_OwnableDelegateProxy_$9",
                  "typeString": "contract OwnableDelegateProxy"
                }
              }
            },
            "visibility": "public"
          }
        ],
        "scope": 409,
        "src": "510:87:16",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 16,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1101,
              "src": "616:5:16"
            },
            "id": 17,
            "nodeType": "InheritanceSpecifier",
            "src": "616:5:16"
          }
        ],
        "canonicalName": "Weth",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 40,
        "linearizedBaseContracts": [
          40,
          1101,
          2534,
          2509,
          2431
        ],
        "name": "Weth",
        "nameLocation": "608:4:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 38,
              "nodeType": "Block",
              "src": "664:66:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 25,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "680:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "680:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "31303030",
                          "id": 27,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "692:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000_by_1",
                            "typeString": "int_const 1000"
                          },
                          "value": "1000"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 34,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3130",
                            "id": 28,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "699:2:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "arguments": [
                              {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 31,
                                  "name": "decimals",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 588,
                                  "src": "711:8:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                    "typeString": "function () view returns (uint8)"
                                  }
                                },
                                "id": 32,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "711:10:16",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              ],
                              "id": 30,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "703:7:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 29,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "703:7:16",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 33,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "703:19:16",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "699:23:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "692:30:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 24,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 918,
                      "src": "674:5:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 36,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "674:49:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 37,
                  "nodeType": "ExpressionStatement",
                  "src": "674:49:16"
                }
              ]
            },
            "id": 39,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "57657468",
                    "id": 20,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "648:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_a7338eeee46063bba99c5dc7b227c968f3910c343756d326e0ebb6f25a3270a4",
                      "typeString": "literal_string \"Weth\""
                    },
                    "value": "Weth"
                  },
                  {
                    "hexValue": "57455448",
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "656:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_0f8a193ff464434486c0daf7db2a895884365d2bc84ba47a68fcf89c1b14b5b8",
                      "typeString": "literal_string \"WETH\""
                    },
                    "value": "WETH"
                  }
                ],
                "id": 22,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 19,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1101,
                  "src": "642:5:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "642:21:16"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "639:2:16"
            },
            "returnParameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "664:0:16"
            },
            "scope": 40,
            "src": "628:102:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 409,
        "src": "599:133:16",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "deployed",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 53,
        "linearizedBaseContracts": [
          53
        ],
        "name": "deployed",
        "nameLocation": "743:8:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 51,
              "nodeType": "Block",
              "src": "876:2:16",
              "statements": []
            },
            "functionSelector": "23b872dd",
            "id": 52,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "767:12:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "797:4:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 52,
                  "src": "789:12:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "789:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "819:2:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 52,
                  "src": "811:10:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 43,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "811:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "839:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 52,
                  "src": "831:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "831:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "779:72:16"
            },
            "returnParameters": {
              "id": 50,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 52,
                  "src": "870:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 48,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "870:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "869:6:16"
            },
            "scope": 53,
            "src": "758:120:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 409,
        "src": "734:146:16",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 54,
              "name": "ERC721URIStorage",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2095,
              "src": "930:16:16"
            },
            "id": 55,
            "nodeType": "InheritanceSpecifier",
            "src": "930:16:16"
          },
          {
            "baseName": {
              "id": 56,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 513,
              "src": "952:7:16"
            },
            "id": 57,
            "nodeType": "InheritanceSpecifier",
            "src": "952:7:16"
          },
          {
            "baseName": {
              "id": 58,
              "name": "ContextMixin",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2210,
              "src": "965:12:16"
            },
            "id": 59,
            "nodeType": "InheritanceSpecifier",
            "src": "965:12:16"
          },
          {
            "baseName": {
              "id": 60,
              "name": "NativeMetaTransaction",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2409,
              "src": "983:21:16"
            },
            "id": 61,
            "nodeType": "InheritanceSpecifier",
            "src": "983:21:16"
          }
        ],
        "canonicalName": "W3rdl3",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 408,
        "linearizedBaseContracts": [
          408,
          2409,
          3645,
          3677,
          2210,
          513,
          2095,
          1967,
          2695,
          2650,
          3217,
          3657,
          2431
        ],
        "name": "W3rdl3",
        "nameLocation": "916:6:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 65,
            "libraryName": {
              "id": 62,
              "name": "Counters",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2169,
              "src": "1017:8:16"
            },
            "nodeType": "UsingForDirective",
            "src": "1011:36:16",
            "typeName": {
              "id": 64,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 63,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2101,
                "src": "1030:16:16"
              },
              "referencedDeclaration": 2101,
              "src": "1030:16:16",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$2101_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "24822514",
            "id": 68,
            "mutability": "mutable",
            "name": "_tokenId",
            "nameLocation": "1076:8:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1052:32:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Counter_$2101_storage",
              "typeString": "struct Counters.Counter"
            },
            "typeName": {
              "id": 67,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 66,
                "name": "Counters.Counter",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 2101,
                "src": "1052:16:16"
              },
              "referencedDeclaration": 2101,
              "src": "1052:16:16",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Counter_$2101_storage_ptr",
                "typeString": "struct Counters.Counter"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "00eee7c8",
            "id": 70,
            "mutability": "mutable",
            "name": "ongoingMintPrice",
            "nameLocation": "1106:16:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1091:31:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 69,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1091:7:16",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 72,
            "mutability": "mutable",
            "name": "proxyRegistryAddress",
            "nameLocation": "1136:20:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1128:28:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 71,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1128:7:16",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "84efcf21",
            "id": 76,
            "mutability": "mutable",
            "name": "minterMap",
            "nameLocation": "1194:9:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1162:41:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 75,
              "keyType": {
                "id": 73,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1170:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1162:24:16",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 74,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1181:4:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a584e82f",
            "id": 80,
            "mutability": "mutable",
            "name": "wordMap",
            "nameLocation": "1240:7:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1209:38:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes5_$_t_bool_$",
              "typeString": "mapping(bytes5 => bool)"
            },
            "typeName": {
              "id": 79,
              "keyType": {
                "id": 77,
                "name": "bytes5",
                "nodeType": "ElementaryTypeName",
                "src": "1217:6:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes5",
                  "typeString": "bytes5"
                }
              },
              "nodeType": "Mapping",
              "src": "1209:23:16",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes5_$_t_bool_$",
                "typeString": "mapping(bytes5 => bool)"
              },
              "valueType": {
                "id": 78,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "1227:4:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 84,
            "mutability": "mutable",
            "name": "rebates",
            "nameLocation": "1287:7:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1253:41:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
              "typeString": "mapping(uint8 => uint256)"
            },
            "typeName": {
              "id": 83,
              "keyType": {
                "id": 81,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "1261:5:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "1253:25:16",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                "typeString": "mapping(uint8 => uint256)"
              },
              "valueType": {
                "id": 82,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1270:7:16",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 86,
            "mutability": "mutable",
            "name": "baseURI",
            "nameLocation": "1315:7:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1300:22:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 85,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1300:6:16",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 89,
            "mutability": "mutable",
            "name": "weth",
            "nameLocation": "1333:4:16",
            "nodeType": "VariableDeclaration",
            "scope": 408,
            "src": "1328:9:16",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Weth_$40",
              "typeString": "contract Weth"
            },
            "typeName": {
              "id": 88,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 87,
                "name": "Weth",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 40,
                "src": "1328:4:16"
              },
              "referencedDeclaration": 40,
              "src": "1328:4:16",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Weth_$40",
                "typeString": "contract Weth"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 165,
              "nodeType": "Block",
              "src": "1581:411:16",
              "statements": [
                {
                  "expression": {
                    "id": 110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 108,
                      "name": "baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 86,
                      "src": "1591:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 109,
                      "name": "_baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 95,
                      "src": "1601:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1591:18:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 111,
                  "nodeType": "ExpressionStatement",
                  "src": "1591:18:16"
                },
                {
                  "expression": {
                    "id": 114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 112,
                      "name": "ongoingMintPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 70,
                      "src": "1619:16:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 113,
                      "name": "_ongoingMintPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 97,
                      "src": "1638:17:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1619:36:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 115,
                  "nodeType": "ExpressionStatement",
                  "src": "1619:36:16"
                },
                {
                  "expression": {
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 116,
                      "name": "weth",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 89,
                      "src": "1665:4:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Weth_$40",
                        "typeString": "contract Weth"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 118,
                          "name": "_wethAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 99,
                          "src": "1677:12:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 117,
                        "name": "Weth",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40,
                        "src": "1672:4:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Weth_$40_$",
                          "typeString": "type(contract Weth)"
                        }
                      },
                      "id": 119,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1672:18:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Weth_$40",
                        "typeString": "contract Weth"
                      }
                    },
                    "src": "1665:25:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Weth_$40",
                      "typeString": "contract Weth"
                    }
                  },
                  "id": 121,
                  "nodeType": "ExpressionStatement",
                  "src": "1665:25:16"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 122,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 68,
                        "src": "1700:8:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$2101_storage",
                          "typeString": "struct Counters.Counter storage ref"
                        }
                      },
                      "id": 124,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "increment",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2127,
                      "src": "1700:18:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$2101_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2101_storage_ptr_$",
                        "typeString": "function (struct Counters.Counter storage pointer)"
                      }
                    },
                    "id": 125,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1700:20:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 126,
                  "nodeType": "ExpressionStatement",
                  "src": "1700:20:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 128,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 91,
                        "src": "1748:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 127,
                      "name": "_initializeEIP712",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3569,
                      "src": "1730:17:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 129,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1730:24:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 130,
                  "nodeType": "ExpressionStatement",
                  "src": "1730:24:16"
                },
                {
                  "expression": {
                    "id": 133,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 131,
                      "name": "proxyRegistryAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "1765:20:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 132,
                      "name": "_proxyRegistryAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 101,
                      "src": "1788:21:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1765:44:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 134,
                  "nodeType": "ExpressionStatement",
                  "src": "1765:44:16"
                },
                {
                  "expression": {
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 135,
                        "name": "rebates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "1820:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                          "typeString": "mapping(uint8 => uint256)"
                        }
                      },
                      "id": 137,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 136,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1828:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1820:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "302e30303035",
                      "id": 138,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1833:12:16",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_500000000000000_by_1",
                        "typeString": "int_const 500000000000000"
                      },
                      "value": "0.0005"
                    },
                    "src": "1820:25:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1820:25:16"
                },
                {
                  "expression": {
                    "id": 145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 141,
                        "name": "rebates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "1855:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                          "typeString": "mapping(uint8 => uint256)"
                        }
                      },
                      "id": 143,
                      "indexExpression": {
                        "hexValue": "32",
                        "id": 142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1863:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_2_by_1",
                          "typeString": "int_const 2"
                        },
                        "value": "2"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1855:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "302e30303034",
                      "id": 144,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1868:12:16",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_400000000000000_by_1",
                        "typeString": "int_const 400000000000000"
                      },
                      "value": "0.0004"
                    },
                    "src": "1855:25:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 146,
                  "nodeType": "ExpressionStatement",
                  "src": "1855:25:16"
                },
                {
                  "expression": {
                    "id": 151,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 147,
                        "name": "rebates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "1890:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                          "typeString": "mapping(uint8 => uint256)"
                        }
                      },
                      "id": 149,
                      "indexExpression": {
                        "hexValue": "33",
                        "id": 148,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1898:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1890:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "302e30303033",
                      "id": 150,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1903:12:16",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_300000000000000_by_1",
                        "typeString": "int_const 300000000000000"
                      },
                      "value": "0.0003"
                    },
                    "src": "1890:25:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 152,
                  "nodeType": "ExpressionStatement",
                  "src": "1890:25:16"
                },
                {
                  "expression": {
                    "id": 157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 153,
                        "name": "rebates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "1925:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                          "typeString": "mapping(uint8 => uint256)"
                        }
                      },
                      "id": 155,
                      "indexExpression": {
                        "hexValue": "34",
                        "id": 154,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1933:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_4_by_1",
                          "typeString": "int_const 4"
                        },
                        "value": "4"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1925:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "302e30303032",
                      "id": 156,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1938:12:16",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_200000000000000_by_1",
                        "typeString": "int_const 200000000000000"
                      },
                      "value": "0.0002"
                    },
                    "src": "1925:25:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 158,
                  "nodeType": "ExpressionStatement",
                  "src": "1925:25:16"
                },
                {
                  "expression": {
                    "id": 163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 159,
                        "name": "rebates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "1960:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                          "typeString": "mapping(uint8 => uint256)"
                        }
                      },
                      "id": 161,
                      "indexExpression": {
                        "hexValue": "35",
                        "id": 160,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1968:1:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_5_by_1",
                          "typeString": "int_const 5"
                        },
                        "value": "5"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1960:10:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "302e30303031",
                      "id": 162,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1973:12:16",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100000000000000_by_1",
                        "typeString": "int_const 100000000000000"
                      },
                      "value": "0.0001"
                    },
                    "src": "1960:25:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 164,
                  "nodeType": "ExpressionStatement",
                  "src": "1960:25:16"
                }
              ]
            },
            "id": 166,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 104,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 91,
                    "src": "1565:5:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 105,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 93,
                    "src": "1572:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 106,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 103,
                  "name": "ERC721",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1967,
                  "src": "1558:6:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "1558:22:16"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1379:5:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1365:19:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 90,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1365:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 93,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1408:7:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1394:21:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 92,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1394:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 95,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "1439:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1425:22:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 94,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1425:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 97,
                  "mutability": "mutable",
                  "name": "_ongoingMintPrice",
                  "nameLocation": "1465:17:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1457:25:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 96,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1457:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 99,
                  "mutability": "mutable",
                  "name": "_wethAddress",
                  "nameLocation": "1500:12:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1492:20:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 98,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1492:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 101,
                  "mutability": "mutable",
                  "name": "_proxyRegistryAddress",
                  "nameLocation": "1530:21:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1522:29:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 100,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1522:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1355:202:16"
            },
            "returnParameters": {
              "id": 107,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1581:0:16"
            },
            "scope": 408,
            "src": "1344:648:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 182,
              "nodeType": "Block",
              "src": "2033:109:16",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 175,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 173,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 169,
                            "name": "_tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 68,
                            "src": "2047:8:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$2101_storage",
                              "typeString": "struct Counters.Counter storage ref"
                            }
                          },
                          "id": 170,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "current",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2113,
                          "src": "2047:16:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$2101_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2101_storage_ptr_$",
                            "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                          }
                        },
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2047:18:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "&",
                      "rightExpression": {
                        "hexValue": "3078334646",
                        "id": 172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2068:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1023_by_1",
                          "typeString": "int_const 1023"
                        },
                        "value": "0x3FF"
                      },
                      "src": "2047:26:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 174,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2077:1:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2047:31:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 181,
                  "nodeType": "IfStatement",
                  "src": "2043:93:16",
                  "trueBody": {
                    "id": 180,
                    "nodeType": "Block",
                    "src": "2080:56:16",
                    "statements": [
                      {
                        "expression": {
                          "id": 178,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 176,
                            "name": "ongoingMintPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 70,
                            "src": "2094:16:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "hexValue": "302e303031",
                            "id": 177,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2114:11:16",
                            "subdenomination": "ether",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000_by_1",
                              "typeString": "int_const 1000000000000000"
                            },
                            "value": "0.001"
                          },
                          "src": "2094:31:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 179,
                        "nodeType": "ExpressionStatement",
                        "src": "2094:31:16"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 183,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintPriceCheck",
            "nameLocation": "2007:14:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 167,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2021:2:16"
            },
            "returnParameters": {
              "id": 168,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2033:0:16"
            },
            "scope": 408,
            "src": "1998:144:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 210,
              "nodeType": "Block",
              "src": "2183:246:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 189,
                              "name": "tx",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -26,
                              "src": "2232:2:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_transaction",
                                "typeString": "tx"
                              }
                            },
                            "id": 190,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "origin",
                            "nodeType": "MemberAccess",
                            "src": "2232:9:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 193,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "2251:4:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_W3rdl3_$408",
                                  "typeString": "contract W3rdl3"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_W3rdl3_$408",
                                  "typeString": "contract W3rdl3"
                                }
                              ],
                              "id": 192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2243:7:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 191,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2243:7:16",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 194,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2243:13:16",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 195,
                            "name": "ongoingMintPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 70,
                            "src": "2258:16:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 187,
                            "name": "weth",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 89,
                            "src": "2214:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Weth_$40",
                              "typeString": "contract Weth"
                            }
                          },
                          "id": 188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 713,
                          "src": "2214:17:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 196,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2214:61:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4661696c65643a20506c65617365207061792074686520617070726f707269617465204f4e474f494e545f4d494e545f505249434520666565",
                        "id": 197,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2289:59:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a98e787b03ec8a3981d295cba51023be484b2465e288e949451b356e4e2e834b",
                          "typeString": "literal_string \"Failed: Please pay the appropriate ONGOINT_MINT_PRICE fee\""
                        },
                        "value": "Failed: Please pay the appropriate ONGOINT_MINT_PRICE fee"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a98e787b03ec8a3981d295cba51023be484b2465e288e949451b356e4e2e834b",
                          "typeString": "literal_string \"Failed: Please pay the appropriate ONGOINT_MINT_PRICE fee\""
                        }
                      ],
                      "id": 186,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2193:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 198,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2193:165:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 199,
                  "nodeType": "ExpressionStatement",
                  "src": "2193:165:16"
                },
                {
                  "expression": {
                    "id": 205,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 200,
                        "name": "minterMap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "2368:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 203,
                      "indexExpression": {
                        "expression": {
                          "id": 201,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2378:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2378:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2368:21:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 204,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2392:4:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2368:28:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 206,
                  "nodeType": "ExpressionStatement",
                  "src": "2368:28:16"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 207,
                      "name": "mintPriceCheck",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 183,
                      "src": "2406:14:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 208,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2406:16:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 209,
                  "nodeType": "ExpressionStatement",
                  "src": "2406:16:16"
                }
              ]
            },
            "functionSelector": "1aa3a008",
            "id": 211,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "register",
            "nameLocation": "2157:8:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 184,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2165:2:16"
            },
            "returnParameters": {
              "id": 185,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2183:0:16"
            },
            "scope": 408,
            "src": "2148:281:16",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 322,
              "nodeType": "Block",
              "src": "2540:884:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 221,
                            "name": "minterMap",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 76,
                            "src": "2571:9:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 224,
                          "indexExpression": {
                            "expression": {
                              "id": 222,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2581:3:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 223,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2581:10:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2571:21:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "74727565",
                          "id": 225,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2596:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "2571:29:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "506c61796572206e6f7420616c6c6f77656420746f206d696e742e20506c65617365207061792074686520617070726f707269617465204f4e474f494e545f4d494e545f505249434520666565206265666f7265206d696e74696e67",
                        "id": 227,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2614:94:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_05a82b7addbaef90f07da9a1072f833e453257de22d3e5f0555027efe0111a13",
                          "typeString": "literal_string \"Player not allowed to mint. Please pay the appropriate ONGOINT_MINT_PRICE fee before minting\""
                        },
                        "value": "Player not allowed to mint. Please pay the appropriate ONGOINT_MINT_PRICE fee before minting"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_05a82b7addbaef90f07da9a1072f833e453257de22d3e5f0555027efe0111a13",
                          "typeString": "literal_string \"Player not allowed to mint. Please pay the appropriate ONGOINT_MINT_PRICE fee before minting\""
                        }
                      ],
                      "id": 220,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2550:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2550:168:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 229,
                  "nodeType": "ExpressionStatement",
                  "src": "2550:168:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 235,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 231,
                            "name": "wordMap",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 80,
                            "src": "2749:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes5_$_t_bool_$",
                              "typeString": "mapping(bytes5 => bool)"
                            }
                          },
                          "id": 233,
                          "indexExpression": {
                            "id": 232,
                            "name": "word",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 215,
                            "src": "2757:4:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes5",
                              "typeString": "bytes5"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2749:13:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "66616c7365",
                          "id": 234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2766:5:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "2749:22:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520776f72642068617320616c7265616479206265656e206d696e74656420627920616e6f7468657220706c61796572",
                        "id": 236,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2785:52:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5f3b1f99285cf55fa8c8609a9609bb8b4bb9fd53a134e8baa2a66366d0c02685",
                          "typeString": "literal_string \"The word has already been minted by another player\""
                        },
                        "value": "The word has already been minted by another player"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5f3b1f99285cf55fa8c8609a9609bb8b4bb9fd53a134e8baa2a66366d0c02685",
                          "typeString": "literal_string \"The word has already been minted by another player\""
                        }
                      ],
                      "id": 230,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2728:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2728:119:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 238,
                  "nodeType": "ExpressionStatement",
                  "src": "2728:119:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 244,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 240,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2865:3:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 241,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2865:10:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 242,
                            "name": "tx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -26,
                            "src": "2879:2:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_transaction",
                              "typeString": "tx"
                            }
                          },
                          "id": 243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "origin",
                          "nodeType": "MemberAccess",
                          "src": "2879:9:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2865:23:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f20426f7473",
                        "id": 245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2890:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fe6bb97ef106d8f88f7e2f777c215ba7b5dd246cbb52003ae4839683e064f93d",
                          "typeString": "literal_string \"No Bots\""
                        },
                        "value": "No Bots"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fe6bb97ef106d8f88f7e2f777c215ba7b5dd246cbb52003ae4839683e064f93d",
                          "typeString": "literal_string \"No Bots\""
                        }
                      ],
                      "id": 239,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2857:7:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 246,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2857:43:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 247,
                  "nodeType": "ExpressionStatement",
                  "src": "2857:43:16"
                },
                {
                  "expression": {
                    "id": 253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 248,
                        "name": "minterMap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "2949:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 251,
                      "indexExpression": {
                        "expression": {
                          "id": 249,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2959:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2959:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2949:21:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 252,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2973:5:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "2949:29:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 254,
                  "nodeType": "ExpressionStatement",
                  "src": "2949:29:16"
                },
                {
                  "expression": {
                    "id": 259,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 255,
                        "name": "wordMap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 80,
                        "src": "2988:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes5_$_t_bool_$",
                          "typeString": "mapping(bytes5 => bool)"
                        }
                      },
                      "id": 257,
                      "indexExpression": {
                        "id": 256,
                        "name": "word",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 215,
                        "src": "2996:4:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes5",
                          "typeString": "bytes5"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2988:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 258,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3004:4:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2988:20:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 260,
                  "nodeType": "ExpressionStatement",
                  "src": "2988:20:16"
                },
                {
                  "assignments": [
                    262
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 262,
                      "mutability": "mutable",
                      "name": "newItemId",
                      "nameLocation": "3027:9:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 322,
                      "src": "3019:17:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 261,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3019:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 266,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 263,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 68,
                        "src": "3039:8:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$2101_storage",
                          "typeString": "struct Counters.Counter storage ref"
                        }
                      },
                      "id": 264,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "current",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2113,
                      "src": "3039:16:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$2101_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2101_storage_ptr_$",
                        "typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
                      }
                    },
                    "id": 265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3039:18:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3019:38:16"
                },
                {
                  "assignments": [
                    268
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 268,
                      "mutability": "mutable",
                      "name": "_tokenURI",
                      "nameLocation": "3081:9:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 322,
                      "src": "3067:23:16",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 267,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3067:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 269,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3067:23:16"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 270,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 68,
                        "src": "3101:8:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$2101_storage",
                          "typeString": "struct Counters.Counter storage ref"
                        }
                      },
                      "id": 272,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "increment",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2127,
                      "src": "3101:18:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$2101_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2101_storage_ptr_$",
                        "typeString": "function (struct Counters.Counter storage pointer)"
                      }
                    },
                    "id": 273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3101:20:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 274,
                  "nodeType": "ExpressionStatement",
                  "src": "3101:20:16"
                },
                {
                  "expression": {
                    "id": 289,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 275,
                      "name": "_tokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 268,
                      "src": "3131:9:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 283,
                                  "name": "baseURI",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 86,
                                  "src": "3169:7:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                ],
                                "id": 282,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3163:5:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                  "typeString": "type(bytes storage pointer)"
                                },
                                "typeName": {
                                  "id": 281,
                                  "name": "bytes",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3163:5:16",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 284,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3163:14:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes storage pointer"
                              }
                            },
                            {
                              "id": 285,
                              "name": "word",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 215,
                              "src": "3179:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes5",
                                "typeString": "bytes5"
                              }
                            },
                            {
                              "hexValue": "2d636f6e6669672e6a736f6e",
                              "id": 286,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3185:14:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e83a33693018b6ab3479d02d2b0ae019ecd78a9ee5162577cbf66b4adb3669ce",
                                "typeString": "literal_string \"-config.json\""
                              },
                              "value": "-config.json"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes storage pointer"
                              },
                              {
                                "typeIdentifier": "t_bytes5",
                                "typeString": "bytes5"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e83a33693018b6ab3479d02d2b0ae019ecd78a9ee5162577cbf66b4adb3669ce",
                                "typeString": "literal_string \"-config.json\""
                              }
                            ],
                            "expression": {
                              "id": 279,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3150:5:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                "typeString": "type(bytes storage pointer)"
                              },
                              "typeName": {
                                "id": 278,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "3150:5:16",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 280,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "concat",
                            "nodeType": "MemberAccess",
                            "src": "3150:12:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function () pure returns (bytes memory)"
                            }
                          },
                          "id": 287,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3150:50:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        ],
                        "id": 277,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3143:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                          "typeString": "type(string storage pointer)"
                        },
                        "typeName": {
                          "id": 276,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3143:6:16",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 288,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3143:58:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "3131:70:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 290,
                  "nodeType": "ExpressionStatement",
                  "src": "3131:70:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 292,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3222:3:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 293,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3222:10:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 294,
                        "name": "newItemId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 262,
                        "src": "3234:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 291,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1596,
                        1625
                      ],
                      "referencedDeclaration": 1596,
                      "src": "3212:9:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3212:32:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 296,
                  "nodeType": "ExpressionStatement",
                  "src": "3212:32:16"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 298,
                        "name": "newItemId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 262,
                        "src": "3267:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 299,
                        "name": "_tokenURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 268,
                        "src": "3278:9:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 297,
                      "name": "_setTokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2064,
                      "src": "3254:12:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3254:34:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 301,
                  "nodeType": "ExpressionStatement",
                  "src": "3254:34:16"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 306,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "baseExpression": {
                        "id": 302,
                        "name": "rebates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 84,
                        "src": "3303:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                          "typeString": "mapping(uint8 => uint256)"
                        }
                      },
                      "id": 304,
                      "indexExpression": {
                        "id": 303,
                        "name": "tries",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 213,
                        "src": "3311:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3303:14:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 305,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3320:1:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3303:18:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 319,
                  "nodeType": "IfStatement",
                  "src": "3299:93:16",
                  "trueBody": {
                    "id": 318,
                    "nodeType": "Block",
                    "src": "3323:69:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "id": 313,
                                "name": "rebates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 84,
                                "src": "3366:7:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint8_$_t_uint256_$",
                                  "typeString": "mapping(uint8 => uint256)"
                                }
                              },
                              "id": 315,
                              "indexExpression": {
                                "id": 314,
                                "name": "tries",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 213,
                                "src": "3374:5:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3366:14:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 309,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "3345:3:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 310,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "3345:10:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 308,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3337:8:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 307,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3337:8:16",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 311,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3337:19:16",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 312,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "src": "3337:28:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 316,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3337:44:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 317,
                        "nodeType": "ExpressionStatement",
                        "src": "3337:44:16"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 320,
                    "name": "newItemId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 262,
                    "src": "3408:9:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 219,
                  "id": 321,
                  "nodeType": "Return",
                  "src": "3401:16:16"
                }
              ]
            },
            "functionSelector": "e4dbd0c2",
            "id": 323,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintWord",
            "nameLocation": "2444:8:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 216,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 213,
                  "mutability": "mutable",
                  "name": "tries",
                  "nameLocation": "2459:5:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 323,
                  "src": "2453:11:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 212,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "2453:5:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 215,
                  "mutability": "mutable",
                  "name": "word",
                  "nameLocation": "2473:4:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 323,
                  "src": "2466:11:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes5",
                    "typeString": "bytes5"
                  },
                  "typeName": {
                    "id": 214,
                    "name": "bytes5",
                    "nodeType": "ElementaryTypeName",
                    "src": "2466:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes5",
                      "typeString": "bytes5"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2452:26:16"
            },
            "returnParameters": {
              "id": 219,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 218,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 323,
                  "src": "2527:7:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 217,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2527:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2526:9:16"
            },
            "scope": 408,
            "src": "2435:989:16",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 339,
              "nodeType": "Block",
              "src": "3489:53:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 336,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 325,
                        "src": "3528:6:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 332,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3507:3:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3507:10:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3499:8:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 330,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3499:8:16",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 334,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3499:19:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 335,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "3499:28:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3499:36:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 338,
                  "nodeType": "ExpressionStatement",
                  "src": "3499:36:16"
                }
              ]
            },
            "functionSelector": "2e1a7d4d",
            "id": 340,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 328,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 327,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 455,
                  "src": "3479:9:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "3479:9:16"
              }
            ],
            "name": "withdraw",
            "nameLocation": "3439:8:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 326,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 325,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3456:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 340,
                  "src": "3448:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 324,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3448:7:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3447:16:16"
            },
            "returnParameters": {
              "id": 329,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3489:0:16"
            },
            "scope": 408,
            "src": "3430:112:16",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 358,
              "nodeType": "Block",
              "src": "3596:68:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 353,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "3643:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_W3rdl3_$408",
                                "typeString": "contract W3rdl3"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_W3rdl3_$408",
                                "typeString": "contract W3rdl3"
                              }
                            ],
                            "id": 352,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3635:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 351,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3635:7:16",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 354,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3635:13:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 355,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "balance",
                        "nodeType": "MemberAccess",
                        "src": "3635:21:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 347,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3614:3:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3614:10:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 346,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3606:8:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 345,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3606:8:16",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 349,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3606:19:16",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 350,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "3606:28:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 356,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3606:51:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 357,
                  "nodeType": "ExpressionStatement",
                  "src": "3606:51:16"
                }
              ]
            },
            "functionSelector": "853828b6",
            "id": 359,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 343,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 342,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 455,
                  "src": "3586:9:16"
                },
                "nodeType": "ModifierInvocation",
                "src": "3586:9:16"
              }
            ],
            "name": "withdrawAll",
            "nameLocation": "3557:11:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 341,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3568:2:16"
            },
            "returnParameters": {
              "id": 344,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3596:0:16"
            },
            "scope": 408,
            "src": "3548:116:16",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1417
            ],
            "body": {
              "id": 395,
              "nodeType": "Block",
              "src": "3838:239:16",
              "statements": [
                {
                  "assignments": [
                    371
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 371,
                      "mutability": "mutable",
                      "name": "proxyRegistry",
                      "nameLocation": "3862:13:16",
                      "nodeType": "VariableDeclaration",
                      "scope": 395,
                      "src": "3848:27:16",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ProxyRegistry_$15",
                        "typeString": "contract ProxyRegistry"
                      },
                      "typeName": {
                        "id": 370,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 369,
                          "name": "ProxyRegistry",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 15,
                          "src": "3848:13:16"
                        },
                        "referencedDeclaration": 15,
                        "src": "3848:13:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ProxyRegistry_$15",
                          "typeString": "contract ProxyRegistry"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 375,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 373,
                        "name": "proxyRegistryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 72,
                        "src": "3892:20:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 372,
                      "name": "ProxyRegistry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15,
                      "src": "3878:13:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ProxyRegistry_$15_$",
                        "typeString": "type(contract ProxyRegistry)"
                      }
                    },
                    "id": 374,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3878:35:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ProxyRegistry_$15",
                      "typeString": "contract ProxyRegistry"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3848:65:16"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 384,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 380,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 361,
                              "src": "3957:5:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 378,
                              "name": "proxyRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 371,
                              "src": "3935:13:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ProxyRegistry_$15",
                                "typeString": "contract ProxyRegistry"
                              }
                            },
                            "id": 379,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "proxies",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 14,
                            "src": "3935:21:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_contract$_OwnableDelegateProxy_$9_$",
                              "typeString": "function (address) view external returns (contract OwnableDelegateProxy)"
                            }
                          },
                          "id": 381,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3935:28:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_OwnableDelegateProxy_$9",
                            "typeString": "contract OwnableDelegateProxy"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_OwnableDelegateProxy_$9",
                            "typeString": "contract OwnableDelegateProxy"
                          }
                        ],
                        "id": 377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3927:7:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 376,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3927:7:16",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 382,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3927:37:16",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 383,
                      "name": "operator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 363,
                      "src": "3968:8:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3927:49:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 388,
                  "nodeType": "IfStatement",
                  "src": "3923:91:16",
                  "trueBody": {
                    "id": 387,
                    "nodeType": "Block",
                    "src": "3978:36:16",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3999:4:16",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 368,
                        "id": 386,
                        "nodeType": "Return",
                        "src": "3992:11:16"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 391,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 361,
                        "src": "4054:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 392,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 363,
                        "src": "4061:8:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 389,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "4031:5:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_W3rdl3_$408_$",
                          "typeString": "type(contract super W3rdl3)"
                        }
                      },
                      "id": 390,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isApprovedForAll",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1417,
                      "src": "4031:22:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address,address) view returns (bool)"
                      }
                    },
                    "id": 393,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4031:39:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 368,
                  "id": 394,
                  "nodeType": "Return",
                  "src": "4024:46:16"
                }
              ]
            },
            "functionSelector": "e985e9c5",
            "id": 396,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedForAll",
            "nameLocation": "3716:16:16",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 365,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3802:8:16"
            },
            "parameters": {
              "id": 364,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 361,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "3741:5:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "3733:13:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 360,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3733:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 363,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "3756:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "3748:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 362,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3748:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3732:33:16"
            },
            "returnParameters": {
              "id": 368,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 367,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "3828:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 366,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3828:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3827:6:16"
            },
            "scope": 408,
            "src": "3707:370:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2421
            ],
            "body": {
              "id": 406,
              "nodeType": "Block",
              "src": "4197:48:16",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 402,
                        "name": "ContextMixin",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2210,
                        "src": "4214:12:16",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ContextMixin_$2210_$",
                          "typeString": "type(contract ContextMixin)"
                        }
                      },
                      "id": 403,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "msgSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2209,
                      "src": "4214:22:16",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                        "typeString": "function () view returns (address payable)"
                      }
                    },
                    "id": 404,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4214:24:16",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "functionReturnParameters": 401,
                  "id": 405,
                  "nodeType": "Return",
                  "src": "4207:31:16"
                }
              ]
            },
            "id": 407,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "4136:10:16",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 398,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4163:8:16"
            },
            "parameters": {
              "id": 397,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4146:2:16"
            },
            "returnParameters": {
              "id": 401,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 400,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "4189:6:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 407,
                  "src": "4181:14:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 399,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4181:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4180:16:16"
            },
            "scope": 408,
            "src": "4127:118:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 409,
        "src": "907:3340:16",
        "usedErrors": []
      }
    ],
    "src": "33:5574:16"
  },
  "bytecode": "60806040523480156200001157600080fd5b50604051806040016040528060048152602001630aecae8d60e31b815250604051806040016040528060048152602001630ae8aa8960e31b815250816003908051906020019062000064929190620001a9565b5080516200007a906004906020840190620001a9565b505050620000b63362000092620000bc60201b60201c565b620000a29060ff16600a62000364565b620000b0906103e862000379565b620000c1565b620003f2565b601290565b6001600160a01b0382166200011c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200013091906200039b565b90915550506001600160a01b038216600090815260208190526040812080548392906200015f9084906200039b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001b790620003b6565b90600052602060002090601f016020900481019282620001db576000855562000226565b82601f10620001f657805160ff191683800117855562000226565b8280016001018555821562000226579182015b828111156200022657825182559160200191906001019062000209565b506200023492915062000238565b5090565b5b8082111562000234576000815560010162000239565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620002a65781600019048211156200028a576200028a6200024f565b808516156200029857918102915b93841c93908002906200026a565b509250929050565b600082620002bf575060016200035e565b81620002ce575060006200035e565b8160018114620002e75760028114620002f25762000312565b60019150506200035e565b60ff8411156200030657620003066200024f565b50506001821b6200035e565b5060208310610133831016604e8410600b841016171562000337575081810a6200035e565b62000343838362000265565b80600019048211156200035a576200035a6200024f565b0290505b92915050565b6000620003728383620002ae565b9392505050565b60008160001904831182151516156200039657620003966200024f565b500290565b60008219821115620003b157620003b16200024f565b500190565b600181811c90821680620003cb57607f821691505b602082108103620003ec57634e487b7160e01b600052602260045260246000fd5b50919050565b6108cd80620004026000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610871565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610871565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b60208210810361086b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089257634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220eec06926bc39ebfb8cfdfdfc0ff0218a3b15533b8263ef4b79e2f4c63952134264736f6c634300080d0033",
  "bytecodeSha1": "7ad4938947261a89c66370f15567205f0a470277",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "Weth",
  "coverageMap": {
    "branches": {
      "1": {
        "ERC20._approve": {
          "30": [
            10254,
            10273,
            true
          ],
          "31": [
            10332,
            10353,
            true
          ]
        },
        "ERC20._spendAllowance": {
          "32": [
            10966,
            11003,
            false
          ],
          "33": [
            11027,
            11053,
            true
          ]
        },
        "ERC20._transfer": {
          "34": [
            7614,
            7632,
            true
          ],
          "35": [
            7692,
            7708,
            true
          ],
          "36": [
            7863,
            7884,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "29": [
            6815,
            6850,
            true
          ]
        }
      },
      "10": {},
      "16": {},
      "2": {},
      "3": {}
    },
    "statements": {
      "1": {
        "ERC20._approve": {
          "16": [
            10246,
            10314
          ],
          "17": [
            10324,
            10392
          ],
          "18": [
            10403,
            10439
          ],
          "19": [
            10449,
            10486
          ]
        },
        "ERC20._spendAllowance": {
          "20": [
            11019,
            11087
          ],
          "21": [
            11129,
            11180
          ]
        },
        "ERC20._transfer": {
          "22": [
            7606,
            7674
          ],
          "23": [
            7684,
            7748
          ],
          "24": [
            7855,
            7927
          ],
          "25": [
            7961,
            7999
          ],
          "26": [
            8019,
            8042
          ],
          "27": [
            8053,
            8084
          ],
          "28": [
            8095,
            8132
          ]
        },
        "ERC20.allowance": {
          "3": [
            4084,
            4118
          ]
        },
        "ERC20.approve": {
          "6": [
            4570,
            4602
          ],
          "7": [
            4612,
            4623
          ]
        },
        "ERC20.balanceOf": {
          "2": [
            3501,
            3526
          ]
        },
        "ERC20.decimals": {
          "1": [
            3168,
            3177
          ]
        },
        "ERC20.decreaseAllowance": {
          "13": [
            6807,
            6892
          ],
          "14": [
            6926,
            6986
          ]
        },
        "ERC20.increaseAllowance": {
          "11": [
            6015,
            6081
          ]
        },
        "ERC20.name": {
          "4": [
            2235,
            2247
          ]
        },
        "ERC20.symbol": {
          "12": [
            2448,
            2462
          ]
        },
        "ERC20.totalSupply": {
          "0": [
            3324,
            3343
          ]
        },
        "ERC20.transfer": {
          "15": [
            3862,
            3890
          ]
        },
        "ERC20.transferFrom": {
          "8": [
            5375,
            5413
          ],
          "9": [
            5423,
            5450
          ],
          "10": [
            5460,
            5471
          ]
        }
      },
      "10": {
        "Context._msgSender": {
          "5": [
            712,
            729
          ]
        }
      },
      "16": {},
      "2": {},
      "3": {}
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/ERC20",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c3919061070b565b60405180910390f35b6100df6100da36600461077c565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a6565b610270565b604051601281526020016100c3565b6100df61013136600461077c565b610294565b6100f36101443660046107e2565b6001600160a01b031660009081526020819052604090205490565b6100b66102d3565b6100df61017536600461077c565b6102e2565b6100df61018836600461077c565b610379565b6100f361019b366004610804565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d590610837565b80601f016020809104026020016040519081016040528092919081815260200182805461020190610837565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600033610266818585610387565b5060019392505050565b60003361027e8582856104ab565b61028985858561053d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061026690829086906102ce908790610871565b610387565b6060600480546101d590610837565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561036c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102898286868403610387565b60003361026681858561053d565b6001600160a01b0383166103e95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610363565b6001600160a01b03821661044a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610363565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610537578181101561052a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610363565b6105378484848403610387565b50505050565b6001600160a01b0383166105a15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610363565b6001600160a01b0382166106035760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610363565b6001600160a01b0383166000908152602081905260409020548181101561067b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610363565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b2908490610871565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fe91815260200190565b60405180910390a3610537565b600060208083528351808285015260005b818110156107385785810183015185820160400152820161071c565b8181111561074a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077757600080fd5b919050565b6000806040838503121561078f57600080fd5b61079883610760565b946020939093013593505050565b6000806000606084860312156107bb57600080fd5b6107c484610760565b92506107d260208501610760565b9150604084013590509250925092565b6000602082840312156107f457600080fd5b6107fd82610760565b9392505050565b6000806040838503121561081757600080fd5b61082083610760565b915061082e60208401610760565b90509250929050565b600181811c9082168061084b57607f821691505b60208210810361086b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561089257634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220eec06926bc39ebfb8cfdfdfc0ff0218a3b15533b8263ef4b79e2f4c63952134264736f6c634300080d0033",
  "deployedSourceMap": "599:133:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:21;;1211:22;1193:41;;1181:2;1166:18;4433:197:1;1053:187:21;3244:106:1;3331:12;;3244:106;;;1391:25:21;;;1379:2;1364:18;3244:106:1;1245:177:21;5192:286:1;;;;;;:::i;:::-;;:::i;3093:91::-;;;3175:2;1902:36:21;;1890:2;1875:18;3093:91:1;1760:184:21;5873:236:1;;;;;;:::i;:::-;;:::i;3408:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:1;3482:7;3508:18;;;;;;;;;;;;3408:125;2367:102;;;:::i;6596:429::-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;3976:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4091:18:1;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149;2156:98;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:10;4570:32:1;719:10:10;4586:7:1;4595:6;4570:8;:32::i;:::-;-1:-1:-1;4619:4:1;;4433:197;-1:-1:-1;;;4433:197:1:o;5192:286::-;5319:4;719:10:10;5375:38:1;5391:4;719:10:10;5406:6:1;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:1;;5192:286;-1:-1:-1;;;;5192:286:1:o;5873:236::-;719:10:10;5961:4:1;6040:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6040:27:1;;;;;;;;;;5961:4;;719:10:10;6015:66:1;;719:10:10;;6040:27:1;;:40;;6070:10;;6040:40;:::i;:::-;6015:8;:66::i;2367:102::-;2423:13;2455:7;2448:14;;;;;:::i;6596:429::-;719:10:10;6689:4:1;6770:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;6770:27:1;;;;;;;;;;6689:4;;719:10:10;6815:35:1;;;;6807:85;;;;-1:-1:-1;;;6807:85:1;;3222:2:21;6807:85:1;;;3204:21:21;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:21;;;3344:35;3396:19;;6807:85:1;;;;;;;;;6926:60;6935:5;6942:7;6970:15;6951:16;:34;6926:8;:60::i;3729:189::-;3808:4;719:10:10;3862:28:1;719:10:10;3879:2:1;3883:6;3862:9;:28::i;10123:370::-;-1:-1:-1;;;;;10254:19:1;;10246:68;;;;-1:-1:-1;;;10246:68:1;;3628:2:21;10246:68:1;;;3610:21:21;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:21;;;3750:34;3801:19;;10246:68:1;3426:400:21;10246:68:1;-1:-1:-1;;;;;10332:21:1;;10324:68;;;;-1:-1:-1;;;10324:68:1;;4033:2:21;10324:68:1;;;4015:21:21;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:21;;;4155:32;4204:19;;10324:68:1;3831:398:21;10324:68:1;-1:-1:-1;;;;;10403:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10454:32;;1391:25:21;;;10454:32:1;;1364:18:21;10454:32:1;;;;;;;10123:370;;;:::o;10770:441::-;-1:-1:-1;;;;;4091:18:1;;;10900:24;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10966:37:1;;10962:243;;11047:6;11027:16;:26;;11019:68;;;;-1:-1:-1;;;11019:68:1;;4436:2:21;11019:68:1;;;4418:21:21;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;11019:68:1;4234:353:21;11019:68:1;11129:51;11138:5;11145:7;11173:6;11154:16;:25;11129:8;:51::i;:::-;10890:321;10770:441;;;:::o;7488:651::-;-1:-1:-1;;;;;7614:18:1;;7606:68;;;;-1:-1:-1;;;7606:68:1;;4794:2:21;7606:68:1;;;4776:21:21;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:21;;;4916:35;4968:19;;7606:68:1;4592:401:21;7606:68:1;-1:-1:-1;;;;;7692:16:1;;7684:64;;;;-1:-1:-1;;;7684:64:1;;5200:2:21;7684:64:1;;;5182:21:21;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:21;;;5322:33;5372:19;;7684:64:1;4998:399:21;7684:64:1;-1:-1:-1;;;;;7830:15:1;;7808:19;7830:15;;;;;;;;;;;7863:21;;;;7855:72;;;;-1:-1:-1;;;7855:72:1;;5604:2:21;7855:72:1;;;5586:21:21;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:21;;;5726:36;5779:19;;7855:72:1;5402:402:21;7855:72:1;-1:-1:-1;;;;;7961:15:1;;;:9;:15;;;;;;;;;;;7979:20;;;7961:38;;8019:13;;;;;;;;:23;;7993:6;;7961:9;8019:23;;7993:6;;8019:23;:::i;:::-;;;;;;;;8073:2;-1:-1:-1;;;;;8058:26:1;8067:4;-1:-1:-1;;;;;8058:26:1;;8077:6;8058:26;;;;1391:25:21;;1379:2;1364:18;;1245:177;8058:26:1;;;;;;;;8095:37;11795:121;14:597:21;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:21;574:15;-1:-1:-1;;570:29:21;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:21:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:21;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:21:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:21:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:21;;2790:225::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    599,
    732
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A6 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2D3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x837 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27E DUP6 DUP3 DUP6 PUSH2 0x4AB JUMP JUMPDEST PUSH2 0x289 DUP6 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x266 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2CE SWAP1 DUP8 SWAP1 PUSH2 0x871 JUMP JUMPDEST PUSH2 0x387 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x837 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x289 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x266 DUP2 DUP6 DUP6 PUSH2 0x53D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x44A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x537 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x52A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x363 JUMP JUMPDEST PUSH2 0x537 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x387 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x603 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B2 SWAP1 DUP5 SWAP1 PUSH2 0x871 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FE SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x738 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x71C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x74A JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x798 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C4 DUP5 PUSH2 0x760 JUMP JUMPDEST SWAP3 POP PUSH2 0x7D2 PUSH1 0x20 DUP6 ADD PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FD DUP3 PUSH2 0x760 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x820 DUP4 PUSH2 0x760 JUMP JUMPDEST SWAP2 POP PUSH2 0x82E PUSH1 0x20 DUP5 ADD PUSH2 0x760 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x84B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x86B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x892 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xC0 PUSH10 0x26BC39EBFB8CFDFDFC0F CREATE 0x21 DUP11 EXTCODESIZE ISZERO MSTORE8 EXTCODESIZE DUP3 PUSH4 0xEF4B79E2 DELEGATECALL 0xC6 CODECOPY MSTORE SGT TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "MSTORE",
      "path": "16"
    },
    "5": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "CALLVALUE",
      "path": "16"
    },
    "6": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "7": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "ISZERO",
      "path": "16"
    },
    "8": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "12": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "REVERT",
      "path": "16"
    },
    "16": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "17": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "POP",
      "path": "16"
    },
    "18": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "CALLDATASIZE",
      "path": "16"
    },
    "21": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "LT",
      "path": "16"
    },
    "22": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "26": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "CALLDATALOAD",
      "path": "16"
    },
    "29": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "SHR",
      "path": "16"
    },
    "32": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "33": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "GT",
      "path": "16"
    },
    "39": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "43": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "44": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "50": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x123"
    },
    "53": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "54": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "55": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "61": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x136"
    },
    "64": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "65": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "66": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "72": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x15F"
    },
    "75": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "76": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "77": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "83": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x167"
    },
    "86": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "87": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "88": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xA9059CBB"
    },
    "93": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "94": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x17A"
    },
    "97": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "98": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "99": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "105": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x18D"
    },
    "108": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "109": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "112": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "REVERT",
      "path": "16"
    },
    "113": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "114": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "115": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "121": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "125": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "126": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x95EA7B3"
    },
    "131": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "132": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xCC"
    },
    "135": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "136": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "137": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x18160DDD"
    },
    "142": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "143": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0xEF"
    },
    "146": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "147": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "148": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x23B872DD"
    },
    "153": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "154": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x101"
    },
    "157": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "158": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "159": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH4",
      "path": "16",
      "value": "0x313CE567"
    },
    "164": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "EQ",
      "path": "16"
    },
    "165": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH2",
      "path": "16",
      "value": "0x114"
    },
    "168": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPI",
      "path": "16"
    },
    "169": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "JUMPDEST",
      "path": "16"
    },
    "170": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "PUSH1",
      "path": "16",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "DUP1",
      "path": "16"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        599,
        732
      ],
      "op": "REVERT",
      "path": "16"
    },
    "174": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "175": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB6"
    },
    "178": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1C6"
    },
    "181": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2156,
        2254
      ],
      "op": "JUMP",
      "path": "1"
    },
    "182": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "183": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "186": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "189": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "190": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "191": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x70B"
    },
    "194": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2156,
        2254
      ],
      "op": "JUMP",
      "path": "1"
    },
    "195": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "196": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "198": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "199": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "DUP1",
      "path": "1"
    },
    "200": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "201": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "SUB",
      "path": "1"
    },
    "202": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "203": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "RETURN",
      "path": "1"
    },
    "204": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "205": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "208": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDA"
    },
    "211": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "212": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "214": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x77C"
    },
    "217": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4433,
        4630
      ],
      "op": "JUMP",
      "path": "1"
    },
    "218": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "219": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x258"
    },
    "222": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4433,
        4630
      ],
      "op": "JUMP",
      "path": "1"
    },
    "223": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "224": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "226": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "227": {
      "op": "SWAP1"
    },
    "228": {
      "op": "ISZERO"
    },
    "229": {
      "op": "ISZERO"
    },
    "230": {
      "op": "DUP2"
    },
    "231": {
      "op": "MSTORE"
    },
    "232": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "234": {
      "op": "ADD"
    },
    "235": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "238": {
      "op": "JUMP"
    },
    "239": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3244,
        3350
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "240": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3331,
        3343
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x2"
    },
    "242": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3331,
        3343
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "243": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3244,
        3350
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "244": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3244,
        3350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "246": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3244,
        3350
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "247": {
      "op": "SWAP1"
    },
    "248": {
      "op": "DUP2"
    },
    "249": {
      "op": "MSTORE"
    },
    "250": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "252": {
      "op": "ADD"
    },
    "253": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3244,
        3350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "256": {
      "op": "JUMP"
    },
    "257": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "258": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "261": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10F"
    },
    "264": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "265": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "267": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7A6"
    },
    "270": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5192,
        5478
      ],
      "op": "JUMP",
      "path": "1"
    },
    "271": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "272": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x270"
    },
    "275": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5192,
        5478
      ],
      "op": "JUMP",
      "path": "1"
    },
    "276": {
      "fn": "ERC20.decimals",
      "offset": [
        3093,
        3184
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "277": {
      "fn": "ERC20.decimals",
      "offset": [
        3093,
        3184
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "279": {
      "fn": "ERC20.decimals",
      "offset": [
        3093,
        3184
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "280": {
      "fn": "ERC20.decimals",
      "offset": [
        3175,
        3177
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 1,
      "value": "0x12"
    },
    "282": {
      "op": "DUP2"
    },
    "283": {
      "op": "MSTORE"
    },
    "284": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "286": {
      "op": "ADD"
    },
    "287": {
      "fn": "ERC20.decimals",
      "offset": [
        3093,
        3184
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC3"
    },
    "290": {
      "op": "JUMP"
    },
    "291": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "292": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "295": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x131"
    },
    "298": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "299": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "301": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x77C"
    },
    "304": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5873,
        6109
      ],
      "op": "JUMP",
      "path": "1"
    },
    "305": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "306": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x294"
    },
    "309": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5873,
        6109
      ],
      "op": "JUMP",
      "path": "1"
    },
    "310": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "311": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF3"
    },
    "314": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x144"
    },
    "317": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "318": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "320": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7E2"
    },
    "323": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3408,
        3533
      ],
      "op": "JUMP",
      "path": "1"
    },
    "324": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "331": {
      "op": "SHL"
    },
    "332": {
      "op": "SUB"
    },
    "333": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "AND",
      "path": "1",
      "statement": 2
    },
    "334": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3482,
        3489
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "336": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "337": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "DUP2",
      "path": "1"
    },
    "338": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "339": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "341": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "DUP2",
      "path": "1"
    },
    "342": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "343": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "344": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "346": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "347": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "348": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "349": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3508,
        3526
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "350": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3408,
        3533
      ],
      "op": "JUMP",
      "path": "1"
    },
    "351": {
      "fn": "ERC20.symbol",
      "offset": [
        2367,
        2469
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "352": {
      "fn": "ERC20.symbol",
      "offset": [
        2367,
        2469
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB6"
    },
    "355": {
      "fn": "ERC20.symbol",
      "offset": [
        2367,
        2469
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2D3"
    },
    "358": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2367,
        2469
      ],
      "op": "JUMP",
      "path": "1"
    },
    "359": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "360": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "363": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x175"
    },
    "366": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "367": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "369": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x77C"
    },
    "372": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6596,
        7025
      ],
      "op": "JUMP",
      "path": "1"
    },
    "373": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "374": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E2"
    },
    "377": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6596,
        7025
      ],
      "op": "JUMP",
      "path": "1"
    },
    "378": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "379": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "382": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x188"
    },
    "385": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "386": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "388": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x77C"
    },
    "391": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3729,
        3918
      ],
      "op": "JUMP",
      "path": "1"
    },
    "392": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "393": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x379"
    },
    "396": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3729,
        3918
      ],
      "op": "JUMP",
      "path": "1"
    },
    "397": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "398": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF3"
    },
    "401": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19B"
    },
    "404": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "405": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "407": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x804"
    },
    "410": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3976,
        4125
      ],
      "op": "JUMP",
      "path": "1"
    },
    "411": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "412": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "416": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "418": {
      "op": "SHL"
    },
    "419": {
      "op": "SUB"
    },
    "420": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "SWAP2",
      "path": "1",
      "statement": 3
    },
    "421": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP3",
      "path": "1"
    },
    "422": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "AND",
      "path": "1"
    },
    "423": {
      "fn": "ERC20.allowance",
      "offset": [
        4065,
        4072
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "425": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "426": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP2",
      "path": "1"
    },
    "427": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "428": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4102
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "430": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "432": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "433": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP2",
      "path": "1"
    },
    "434": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "435": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "437": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP1",
      "path": "1"
    },
    "438": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP4",
      "path": "1"
    },
    "439": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "440": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "441": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "442": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "443": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "AND",
      "path": "1"
    },
    "444": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "DUP3",
      "path": "1"
    },
    "445": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "446": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "447": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "448": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "449": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "450": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "451": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "452": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "453": {
      "fn": "ERC20.allowance",
      "offset": [
        3976,
        4125
      ],
      "op": "JUMP",
      "path": "1"
    },
    "454": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "455": {
      "fn": "ERC20.name",
      "offset": [
        2210,
        2223
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "457": {
      "fn": "ERC20.name",
      "offset": [
        2242,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 4,
      "value": "0x3"
    },
    "459": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "460": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "461": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1D5"
    },
    "464": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "465": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x837"
    },
    "468": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMP",
      "path": "1"
    },
    "469": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "470": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "471": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "473": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "474": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "476": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "477": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "478": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DIV",
      "path": "1"
    },
    "479": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MUL",
      "path": "1"
    },
    "480": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "482": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "483": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "485": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "486": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "487": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP2",
      "path": "1"
    },
    "488": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "489": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "491": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "492": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "493": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "494": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "495": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "496": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP2",
      "path": "1"
    },
    "497": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP2",
      "path": "1"
    },
    "498": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "499": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "501": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "502": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP3",
      "path": "1"
    },
    "503": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "504": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "505": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x201"
    },
    "508": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "509": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x837"
    },
    "512": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMP",
      "path": "1"
    },
    "513": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "514": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "515": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "516": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x24E"
    },
    "519": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "520": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "521": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "523": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "LT",
      "path": "1"
    },
    "524": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x223"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "528": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "531": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "532": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP4",
      "path": "1"
    },
    "533": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DIV",
      "path": "1"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MUL",
      "path": "1"
    },
    "536": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP4",
      "path": "1"
    },
    "537": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "538": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "542": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x24E"
    },
    "546": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMP",
      "path": "1"
    },
    "547": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "548": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP3",
      "path": "1"
    },
    "549": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "550": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "551": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "552": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "554": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "555": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "557": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "559": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "560": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "561": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "562": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP2",
      "path": "1"
    },
    "563": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "564": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP2",
      "path": "1"
    },
    "565": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "566": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "567": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "569": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "570": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "571": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "573": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "574": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP1",
      "path": "1"
    },
    "575": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP4",
      "path": "1"
    },
    "576": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "GT",
      "path": "1"
    },
    "577": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x231"
    },
    "580": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "581": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP3",
      "path": "1"
    },
    "582": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "583": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SUB",
      "path": "1"
    },
    "584": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "586": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "AND",
      "path": "1"
    },
    "587": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "DUP3",
      "path": "1"
    },
    "588": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "ADD",
      "path": "1"
    },
    "589": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "590": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "591": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "POP",
      "path": "1"
    },
    "592": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "POP",
      "path": "1"
    },
    "593": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "POP",
      "path": "1"
    },
    "594": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "POP",
      "path": "1"
    },
    "595": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "POP",
      "path": "1"
    },
    "596": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "597": {
      "fn": "ERC20.name",
      "offset": [
        2235,
        2247
      ],
      "op": "POP",
      "path": "1"
    },
    "598": {
      "fn": "ERC20.name",
      "offset": [
        2156,
        2254
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "599": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2156,
        2254
      ],
      "op": "JUMP",
      "path": "1"
    },
    "600": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "601": {
      "fn": "ERC20.approve",
      "offset": [
        4516,
        4520
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "603": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "10",
      "statement": 5
    },
    "604": {
      "fn": "ERC20.approve",
      "offset": [
        4570,
        4602
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 6,
      "value": "0x266"
    },
    "607": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "DUP2",
      "path": "10"
    },
    "608": {
      "fn": "ERC20.approve",
      "offset": [
        4586,
        4593
      ],
      "op": "DUP6",
      "path": "1"
    },
    "609": {
      "fn": "ERC20.approve",
      "offset": [
        4595,
        4601
      ],
      "op": "DUP6",
      "path": "1"
    },
    "610": {
      "fn": "ERC20.approve",
      "offset": [
        4570,
        4578
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x387"
    },
    "613": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4570,
        4602
      ],
      "op": "JUMP",
      "path": "1"
    },
    "614": {
      "fn": "ERC20.approve",
      "offset": [
        4570,
        4602
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "615": {
      "op": "POP"
    },
    "616": {
      "fn": "ERC20.approve",
      "offset": [
        4619,
        4623
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 7,
      "value": "0x1"
    },
    "618": {
      "fn": "ERC20.approve",
      "offset": [
        4619,
        4623
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "619": {
      "fn": "ERC20.approve",
      "offset": [
        4433,
        4630
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "620": {
      "op": "POP"
    },
    "621": {
      "op": "POP"
    },
    "622": {
      "op": "POP"
    },
    "623": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4433,
        4630
      ],
      "op": "JUMP",
      "path": "1"
    },
    "624": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "625": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5319,
        5323
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "627": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "10"
    },
    "628": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5375,
        5413
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 8,
      "value": "0x27E"
    },
    "631": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5391,
        5395
      ],
      "op": "DUP6",
      "path": "1"
    },
    "632": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "DUP3",
      "path": "10"
    },
    "633": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5406,
        5412
      ],
      "op": "DUP6",
      "path": "1"
    },
    "634": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5375,
        5390
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4AB"
    },
    "637": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5375,
        5413
      ],
      "op": "JUMP",
      "path": "1"
    },
    "638": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5375,
        5413
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "639": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5423,
        5450
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 9,
      "value": "0x289"
    },
    "642": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5433,
        5437
      ],
      "op": "DUP6",
      "path": "1"
    },
    "643": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5439,
        5441
      ],
      "op": "DUP6",
      "path": "1"
    },
    "644": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5443,
        5449
      ],
      "op": "DUP6",
      "path": "1"
    },
    "645": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5423,
        5432
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x53D"
    },
    "648": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5423,
        5450
      ],
      "op": "JUMP",
      "path": "1"
    },
    "649": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5423,
        5450
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "650": {
      "op": "POP"
    },
    "651": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5467,
        5471
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 10,
      "value": "0x1"
    },
    "653": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5467,
        5471
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "654": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5192,
        5478
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "655": {
      "op": "POP"
    },
    "656": {
      "op": "POP"
    },
    "657": {
      "op": "POP"
    },
    "658": {
      "op": "POP"
    },
    "659": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        5192,
        5478
      ],
      "op": "JUMP",
      "path": "1"
    },
    "660": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5873,
        6109
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "661": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "10"
    },
    "662": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5961,
        5965
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "664": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 11
    },
    "665": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "DUP2",
      "path": "1"
    },
    "666": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "667": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6051
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "669": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "671": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "672": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "DUP2",
      "path": "1"
    },
    "673": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "674": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "676": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "DUP1",
      "path": "1"
    },
    "677": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "DUP4",
      "path": "1"
    },
    "678": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6058
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "679": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "681": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "683": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "685": {
      "op": "SHL"
    },
    "686": {
      "op": "SUB"
    },
    "687": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "DUP8",
      "path": "1"
    },
    "688": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "AND",
      "path": "1"
    },
    "689": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "DUP5",
      "path": "1"
    },
    "690": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "691": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "692": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "693": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "694": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "DUP2",
      "path": "1"
    },
    "695": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "696": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "697": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5961,
        5965
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "698": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5961,
        5965
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "699": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "700": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6015,
        6081
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x266"
    },
    "703": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6015,
        6081
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "704": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "DUP3",
      "path": "10"
    },
    "705": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "706": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "DUP7",
      "path": "1"
    },
    "707": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6067
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "708": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6080
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2CE"
    },
    "711": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6080
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "712": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6070,
        6080
      ],
      "op": "DUP8",
      "path": "1"
    },
    "713": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6070,
        6080
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "714": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6080
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x871"
    },
    "717": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        6040,
        6080
      ],
      "op": "JUMP",
      "path": "1"
    },
    "718": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6040,
        6080
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "719": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        6015,
        6023
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x387"
    },
    "722": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        6015,
        6081
      ],
      "op": "JUMP",
      "path": "1"
    },
    "723": {
      "fn": "ERC20.symbol",
      "offset": [
        2367,
        2469
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "724": {
      "fn": "ERC20.symbol",
      "offset": [
        2423,
        2436
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "726": {
      "fn": "ERC20.symbol",
      "offset": [
        2455,
        2462
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 12,
      "value": "0x4"
    },
    "728": {
      "fn": "ERC20.symbol",
      "offset": [
        2448,
        2462
      ],
      "op": "DUP1",
      "path": "1"
    },
    "729": {
      "fn": "ERC20.symbol",
      "offset": [
        2448,
        2462
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "730": {
      "fn": "ERC20.symbol",
      "offset": [
        2448,
        2462
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1D5"
    },
    "733": {
      "fn": "ERC20.symbol",
      "offset": [
        2448,
        2462
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "734": {
      "fn": "ERC20.symbol",
      "offset": [
        2448,
        2462
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x837"
    },
    "737": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2448,
        2462
      ],
      "op": "JUMP",
      "path": "1"
    },
    "738": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6596,
        7025
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "739": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "10"
    },
    "740": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6689,
        6693
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "742": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "DUP2",
      "path": "1"
    },
    "743": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "DUP2",
      "path": "1"
    },
    "744": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "745": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6781
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "747": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "749": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "750": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "DUP2",
      "path": "1"
    },
    "751": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "752": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "754": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "DUP1",
      "path": "1"
    },
    "755": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "DUP4",
      "path": "1"
    },
    "756": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6788
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "759": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "761": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "763": {
      "op": "SHL"
    },
    "764": {
      "op": "SUB"
    },
    "765": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "DUP8",
      "path": "1"
    },
    "766": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "AND",
      "path": "1"
    },
    "767": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "DUP5",
      "path": "1"
    },
    "768": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "769": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "770": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "771": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "772": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "DUP2",
      "path": "1"
    },
    "773": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "774": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6797
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "775": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6689,
        6693
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "776": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6689,
        6693
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "777": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "778": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6815,
        6850
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 13
    },
    "779": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6815,
        6850
      ],
      "op": "DUP2",
      "path": "1"
    },
    "780": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6815,
        6850
      ],
      "op": "LT",
      "path": "1"
    },
    "781": {
      "branch": 29,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6815,
        6850
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "782": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x36C"
    },
    "785": {
      "branch": 29,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "786": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "788": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "789": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "793": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "795": {
      "op": "SHL"
    },
    "796": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "DUP2",
      "path": "1"
    },
    "797": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "798": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "800": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "802": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "DUP3",
      "path": "1"
    },
    "803": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "ADD",
      "path": "1"
    },
    "804": {
      "op": "MSTORE"
    },
    "805": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "807": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "809": {
      "op": "DUP3"
    },
    "810": {
      "op": "ADD"
    },
    "811": {
      "op": "MSTORE"
    },
    "812": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "845": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "847": {
      "op": "DUP3"
    },
    "848": {
      "op": "ADD"
    },
    "849": {
      "op": "MSTORE"
    },
    "850": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "856": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "858": {
      "op": "SHL"
    },
    "859": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "861": {
      "op": "DUP3"
    },
    "862": {
      "op": "ADD"
    },
    "863": {
      "op": "MSTORE"
    },
    "864": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "866": {
      "op": "ADD"
    },
    "867": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "868": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "870": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "871": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "DUP1",
      "path": "1"
    },
    "872": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "873": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "SUB",
      "path": "1"
    },
    "874": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "875": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "876": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6807,
        6892
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "877": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6926,
        6986
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 14,
      "value": "0x289"
    },
    "880": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6935,
        6940
      ],
      "op": "DUP3",
      "path": "1"
    },
    "881": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6942,
        6949
      ],
      "op": "DUP7",
      "path": "1"
    },
    "882": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6970,
        6985
      ],
      "op": "DUP7",
      "path": "1"
    },
    "883": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6951,
        6967
      ],
      "op": "DUP5",
      "path": "1"
    },
    "884": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6951,
        6985
      ],
      "op": "SUB",
      "path": "1"
    },
    "885": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6926,
        6934
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x387"
    },
    "888": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6926,
        6986
      ],
      "op": "JUMP",
      "path": "1"
    },
    "889": {
      "fn": "ERC20.transfer",
      "offset": [
        3729,
        3918
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "890": {
      "fn": "ERC20.transfer",
      "offset": [
        3808,
        3812
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "892": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "10"
    },
    "893": {
      "fn": "ERC20.transfer",
      "offset": [
        3862,
        3890
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 15,
      "value": "0x266"
    },
    "896": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "DUP2",
      "path": "10"
    },
    "897": {
      "fn": "ERC20.transfer",
      "offset": [
        3879,
        3881
      ],
      "op": "DUP6",
      "path": "1"
    },
    "898": {
      "fn": "ERC20.transfer",
      "offset": [
        3883,
        3889
      ],
      "op": "DUP6",
      "path": "1"
    },
    "899": {
      "fn": "ERC20.transfer",
      "offset": [
        3862,
        3871
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x53D"
    },
    "902": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3862,
        3890
      ],
      "op": "JUMP",
      "path": "1"
    },
    "903": {
      "fn": "ERC20._approve",
      "offset": [
        10123,
        10493
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "904": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "906": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "908": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "910": {
      "op": "SHL"
    },
    "911": {
      "op": "SUB"
    },
    "912": {
      "fn": "ERC20._approve",
      "offset": [
        10254,
        10273
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 16
    },
    "913": {
      "branch": 30,
      "fn": "ERC20._approve",
      "offset": [
        10254,
        10273
      ],
      "op": "AND",
      "path": "1"
    },
    "914": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3E9"
    },
    "917": {
      "branch": 30,
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "918": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "920": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "921": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "925": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "927": {
      "op": "SHL"
    },
    "928": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "DUP2",
      "path": "1"
    },
    "929": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "930": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "932": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "934": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "DUP3",
      "path": "1"
    },
    "935": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "ADD",
      "path": "1"
    },
    "936": {
      "op": "MSTORE"
    },
    "937": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "939": {
      "op": "DUP1"
    },
    "940": {
      "op": "DUP3"
    },
    "941": {
      "op": "ADD"
    },
    "942": {
      "op": "MSTORE"
    },
    "943": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "976": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "978": {
      "op": "DUP3"
    },
    "979": {
      "op": "ADD"
    },
    "980": {
      "op": "MSTORE"
    },
    "981": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "986": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "988": {
      "op": "SHL"
    },
    "989": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "991": {
      "op": "DUP3"
    },
    "992": {
      "op": "ADD"
    },
    "993": {
      "op": "MSTORE"
    },
    "994": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "996": {
      "op": "ADD"
    },
    "997": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x363"
    },
    "1000": {
      "op": "JUMP"
    },
    "1001": {
      "fn": "ERC20._approve",
      "offset": [
        10246,
        10314
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1002": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1008": {
      "op": "SHL"
    },
    "1009": {
      "op": "SUB"
    },
    "1010": {
      "fn": "ERC20._approve",
      "offset": [
        10332,
        10353
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 17
    },
    "1011": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        10332,
        10353
      ],
      "op": "AND",
      "path": "1"
    },
    "1012": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x44A"
    },
    "1015": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1016": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1018": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1019": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1023": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1025": {
      "op": "SHL"
    },
    "1026": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1027": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1028": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1030": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1032": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1033": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "ADD",
      "path": "1"
    },
    "1034": {
      "op": "MSTORE"
    },
    "1035": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1037": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1039": {
      "op": "DUP3"
    },
    "1040": {
      "op": "ADD"
    },
    "1041": {
      "op": "MSTORE"
    },
    "1042": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "1075": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1077": {
      "op": "DUP3"
    },
    "1078": {
      "op": "ADD"
    },
    "1079": {
      "op": "MSTORE"
    },
    "1080": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1085": {
      "op": "SHL"
    },
    "1086": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1088": {
      "op": "DUP3"
    },
    "1089": {
      "op": "ADD"
    },
    "1090": {
      "op": "MSTORE"
    },
    "1091": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1093": {
      "op": "ADD"
    },
    "1094": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x363"
    },
    "1097": {
      "op": "JUMP"
    },
    "1098": {
      "fn": "ERC20._approve",
      "offset": [
        10324,
        10392
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1099": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1101": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1103": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1105": {
      "op": "SHL"
    },
    "1106": {
      "op": "SUB"
    },
    "1107": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 18
    },
    "1108": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1109": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "AND",
      "path": "1"
    },
    "1110": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1112": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1113": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1114": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1115": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10414
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1117": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1119": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1120": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1121": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1122": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1124": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1125": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1126": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10421
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1127": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1128": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1129": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "AND",
      "path": "1"
    },
    "1130": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1131": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1132": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1133": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1134": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1135": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1136": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1137": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1138": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1139": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10430
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1140": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10439
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1141": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10439
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1142": {
      "fn": "ERC20._approve",
      "offset": [
        10403,
        10439
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1143": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 19
    },
    "1144": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1145": {
      "op": "DUP5"
    },
    "1146": {
      "op": "DUP2"
    },
    "1147": {
      "op": "MSTORE"
    },
    "1148": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1181": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1182": {
      "op": "ADD"
    },
    "1183": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1185": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1186": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1187": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1188": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "SUB",
      "path": "1"
    },
    "1189": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1190": {
      "fn": "ERC20._approve",
      "offset": [
        10454,
        10486
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1191": {
      "fn": "ERC20._approve",
      "offset": [
        10123,
        10493
      ],
      "op": "POP",
      "path": "1"
    },
    "1192": {
      "fn": "ERC20._approve",
      "offset": [
        10123,
        10493
      ],
      "op": "POP",
      "path": "1"
    },
    "1193": {
      "fn": "ERC20._approve",
      "offset": [
        10123,
        10493
      ],
      "op": "POP",
      "path": "1"
    },
    "1194": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        10123,
        10493
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1195": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10770,
        11211
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1196": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1198": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1200": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1202": {
      "op": "SHL"
    },
    "1203": {
      "op": "SUB"
    },
    "1204": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1205": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1206": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "AND",
      "path": "1"
    },
    "1207": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10900,
        10924
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1209": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1210": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1211": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1212": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4102
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1214": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1216": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1217": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1218": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1219": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1221": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1222": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1223": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4109
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1224": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1225": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "DUP7",
      "path": "1"
    },
    "1226": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "AND",
      "path": "1"
    },
    "1227": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1228": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1229": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1230": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1231": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1232": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1233": {
      "fn": "ERC20.allowance",
      "offset": [
        4091,
        4118
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1234": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1236": {
      "op": "NOT"
    },
    "1237": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10966,
        11003
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1238": {
      "branch": 32,
      "fn": "ERC20._spendAllowance",
      "offset": [
        10966,
        11003
      ],
      "op": "EQ",
      "path": "1"
    },
    "1239": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10962,
        11205
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x537"
    },
    "1242": {
      "branch": 32,
      "fn": "ERC20._spendAllowance",
      "offset": [
        10962,
        11205
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1243": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11047,
        11053
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 20
    },
    "1244": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11027,
        11043
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1245": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11027,
        11053
      ],
      "op": "LT",
      "path": "1"
    },
    "1246": {
      "branch": 33,
      "fn": "ERC20._spendAllowance",
      "offset": [
        11027,
        11053
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1247": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x52A"
    },
    "1250": {
      "branch": 33,
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1251": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1253": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1254": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1260": {
      "op": "SHL"
    },
    "1261": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1262": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1263": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1265": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1267": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1268": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "ADD",
      "path": "1"
    },
    "1269": {
      "op": "MSTORE"
    },
    "1270": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "1272": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1274": {
      "op": "DUP3"
    },
    "1275": {
      "op": "ADD"
    },
    "1276": {
      "op": "MSTORE"
    },
    "1277": {
      "op": "PUSH32",
      "value": "0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
    },
    "1310": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1312": {
      "op": "DUP3"
    },
    "1313": {
      "op": "ADD"
    },
    "1314": {
      "op": "MSTORE"
    },
    "1315": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1317": {
      "op": "ADD"
    },
    "1318": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x363"
    },
    "1321": {
      "op": "JUMP"
    },
    "1322": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11019,
        11087
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1323": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11129,
        11180
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 21,
      "value": "0x537"
    },
    "1326": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11138,
        11143
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1327": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11145,
        11152
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1328": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11173,
        11179
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1329": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11154,
        11170
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1330": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11154,
        11179
      ],
      "op": "SUB",
      "path": "1"
    },
    "1331": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11129,
        11137
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x387"
    },
    "1334": {
      "fn": "ERC20._spendAllowance",
      "jump": "i",
      "offset": [
        11129,
        11180
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1335": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        11129,
        11180
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1336": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10890,
        11211
      ],
      "op": "POP",
      "path": "1"
    },
    "1337": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10770,
        11211
      ],
      "op": "POP",
      "path": "1"
    },
    "1338": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10770,
        11211
      ],
      "op": "POP",
      "path": "1"
    },
    "1339": {
      "fn": "ERC20._spendAllowance",
      "offset": [
        10770,
        11211
      ],
      "op": "POP",
      "path": "1"
    },
    "1340": {
      "fn": "ERC20._spendAllowance",
      "jump": "o",
      "offset": [
        10770,
        11211
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1341": {
      "fn": "ERC20._transfer",
      "offset": [
        7488,
        8139
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1344": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1346": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1348": {
      "op": "SHL"
    },
    "1349": {
      "op": "SUB"
    },
    "1350": {
      "fn": "ERC20._transfer",
      "offset": [
        7614,
        7632
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 22
    },
    "1351": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7614,
        7632
      ],
      "op": "AND",
      "path": "1"
    },
    "1352": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5A1"
    },
    "1355": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1356": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1358": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1359": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1363": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1365": {
      "op": "SHL"
    },
    "1366": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1367": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1368": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1370": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1372": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1373": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "ADD",
      "path": "1"
    },
    "1374": {
      "op": "MSTORE"
    },
    "1375": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "1377": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1379": {
      "op": "DUP3"
    },
    "1380": {
      "op": "ADD"
    },
    "1381": {
      "op": "MSTORE"
    },
    "1382": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "1415": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1417": {
      "op": "DUP3"
    },
    "1418": {
      "op": "ADD"
    },
    "1419": {
      "op": "MSTORE"
    },
    "1420": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "1426": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "1428": {
      "op": "SHL"
    },
    "1429": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1431": {
      "op": "DUP3"
    },
    "1432": {
      "op": "ADD"
    },
    "1433": {
      "op": "MSTORE"
    },
    "1434": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1436": {
      "op": "ADD"
    },
    "1437": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x363"
    },
    "1440": {
      "op": "JUMP"
    },
    "1441": {
      "fn": "ERC20._transfer",
      "offset": [
        7606,
        7674
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1442": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1444": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1446": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1448": {
      "op": "SHL"
    },
    "1449": {
      "op": "SUB"
    },
    "1450": {
      "fn": "ERC20._transfer",
      "offset": [
        7692,
        7708
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 23
    },
    "1451": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7692,
        7708
      ],
      "op": "AND",
      "path": "1"
    },
    "1452": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x603"
    },
    "1455": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1456": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1458": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1459": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1463": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1465": {
      "op": "SHL"
    },
    "1466": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1467": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1470": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1472": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1473": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "ADD",
      "path": "1"
    },
    "1474": {
      "op": "MSTORE"
    },
    "1475": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "1477": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1479": {
      "op": "DUP3"
    },
    "1480": {
      "op": "ADD"
    },
    "1481": {
      "op": "MSTORE"
    },
    "1482": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "1515": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1517": {
      "op": "DUP3"
    },
    "1518": {
      "op": "ADD"
    },
    "1519": {
      "op": "MSTORE"
    },
    "1520": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "1524": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "1526": {
      "op": "SHL"
    },
    "1527": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1529": {
      "op": "DUP3"
    },
    "1530": {
      "op": "ADD"
    },
    "1531": {
      "op": "MSTORE"
    },
    "1532": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1534": {
      "op": "ADD"
    },
    "1535": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x363"
    },
    "1538": {
      "op": "JUMP"
    },
    "1539": {
      "fn": "ERC20._transfer",
      "offset": [
        7684,
        7748
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1540": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1542": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1544": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1546": {
      "op": "SHL"
    },
    "1547": {
      "op": "SUB"
    },
    "1548": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1549": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "AND",
      "path": "1"
    },
    "1550": {
      "fn": "ERC20._transfer",
      "offset": [
        7808,
        7827
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1552": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1553": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1554": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1555": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1557": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1558": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1559": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1560": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1562": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1563": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1564": {
      "fn": "ERC20._transfer",
      "offset": [
        7830,
        7845
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1565": {
      "fn": "ERC20._transfer",
      "offset": [
        7863,
        7884
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 24
    },
    "1566": {
      "fn": "ERC20._transfer",
      "offset": [
        7863,
        7884
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1567": {
      "fn": "ERC20._transfer",
      "offset": [
        7863,
        7884
      ],
      "op": "LT",
      "path": "1"
    },
    "1568": {
      "branch": 36,
      "fn": "ERC20._transfer",
      "offset": [
        7863,
        7884
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1569": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x67B"
    },
    "1572": {
      "branch": 36,
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1573": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1575": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1576": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1580": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1582": {
      "op": "SHL"
    },
    "1583": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1584": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1587": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1589": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1590": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "ADD",
      "path": "1"
    },
    "1591": {
      "op": "MSTORE"
    },
    "1592": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1594": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1596": {
      "op": "DUP3"
    },
    "1597": {
      "op": "ADD"
    },
    "1598": {
      "op": "MSTORE"
    },
    "1599": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "1632": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1634": {
      "op": "DUP3"
    },
    "1635": {
      "op": "ADD"
    },
    "1636": {
      "op": "MSTORE"
    },
    "1637": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "1644": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "1646": {
      "op": "SHL"
    },
    "1647": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1649": {
      "op": "DUP3"
    },
    "1650": {
      "op": "ADD"
    },
    "1651": {
      "op": "MSTORE"
    },
    "1652": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1654": {
      "op": "ADD"
    },
    "1655": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x363"
    },
    "1658": {
      "op": "JUMP"
    },
    "1659": {
      "fn": "ERC20._transfer",
      "offset": [
        7855,
        7927
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1660": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1662": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1664": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1666": {
      "op": "SHL"
    },
    "1667": {
      "op": "SUB"
    },
    "1668": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 25
    },
    "1669": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1670": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "AND",
      "path": "1"
    },
    "1671": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7970
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1673": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1674": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1675": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1676": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1678": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1679": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1680": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1681": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1683": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1684": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1685": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7976
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1686": {
      "fn": "ERC20._transfer",
      "offset": [
        7979,
        7999
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1687": {
      "fn": "ERC20._transfer",
      "offset": [
        7979,
        7999
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1688": {
      "fn": "ERC20._transfer",
      "offset": [
        7979,
        7999
      ],
      "op": "SUB",
      "path": "1"
    },
    "1689": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7999
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1690": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7999
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1691": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "SWAP2",
      "path": "1",
      "statement": 26
    },
    "1692": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1693": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "AND",
      "path": "1"
    },
    "1694": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1695": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1696": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1697": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1698": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8032
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1699": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1700": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1701": {
      "fn": "ERC20._transfer",
      "offset": [
        7993,
        7999
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1702": {
      "fn": "ERC20._transfer",
      "offset": [
        7993,
        7999
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1703": {
      "fn": "ERC20._transfer",
      "offset": [
        7961,
        7970
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1704": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6B2"
    },
    "1707": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1708": {
      "fn": "ERC20._transfer",
      "offset": [
        7993,
        7999
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1709": {
      "fn": "ERC20._transfer",
      "offset": [
        7993,
        7999
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1710": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x871"
    },
    "1713": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        8019,
        8042
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1714": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1715": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1716": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "POP",
      "path": "1"
    },
    "1717": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "POP",
      "path": "1"
    },
    "1718": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1719": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1720": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1721": {
      "fn": "ERC20._transfer",
      "offset": [
        8019,
        8042
      ],
      "op": "POP",
      "path": "1"
    },
    "1722": {
      "fn": "ERC20._transfer",
      "offset": [
        8073,
        8075
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 27
    },
    "1723": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1725": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1727": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1729": {
      "op": "SHL"
    },
    "1730": {
      "op": "SUB"
    },
    "1731": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "AND",
      "path": "1"
    },
    "1732": {
      "fn": "ERC20._transfer",
      "offset": [
        8067,
        8071
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1733": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1739": {
      "op": "SHL"
    },
    "1740": {
      "op": "SUB"
    },
    "1741": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "AND",
      "path": "1"
    },
    "1742": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1775": {
      "fn": "ERC20._transfer",
      "offset": [
        8077,
        8083
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1776": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1778": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1779": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6FE"
    },
    "1782": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1783": {
      "op": "DUP2"
    },
    "1784": {
      "op": "MSTORE"
    },
    "1785": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1787": {
      "op": "ADD"
    },
    "1788": {
      "op": "SWAP1"
    },
    "1789": {
      "op": "JUMP"
    },
    "1790": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1791": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1793": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1794": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1795": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1796": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "SUB",
      "path": "1"
    },
    "1797": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1798": {
      "fn": "ERC20._transfer",
      "offset": [
        8058,
        8084
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1799": {
      "fn": "ERC20._transfer",
      "offset": [
        8095,
        8132
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 28,
      "value": "0x537"
    },
    "1802": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        11795,
        11916
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1803": {
      "op": "JUMPDEST"
    },
    "1804": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1806": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1808": {
      "op": "DUP1"
    },
    "1809": {
      "op": "DUP4"
    },
    "1810": {
      "op": "MSTORE"
    },
    "1811": {
      "op": "DUP4"
    },
    "1812": {
      "op": "MLOAD"
    },
    "1813": {
      "op": "DUP1"
    },
    "1814": {
      "op": "DUP3"
    },
    "1815": {
      "op": "DUP6"
    },
    "1816": {
      "op": "ADD"
    },
    "1817": {
      "op": "MSTORE"
    },
    "1818": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1820": {
      "op": "JUMPDEST"
    },
    "1821": {
      "op": "DUP2"
    },
    "1822": {
      "op": "DUP2"
    },
    "1823": {
      "op": "LT"
    },
    "1824": {
      "op": "ISZERO"
    },
    "1825": {
      "op": "PUSH2",
      "value": "0x738"
    },
    "1828": {
      "op": "JUMPI"
    },
    "1829": {
      "op": "DUP6"
    },
    "1830": {
      "op": "DUP2"
    },
    "1831": {
      "op": "ADD"
    },
    "1832": {
      "op": "DUP4"
    },
    "1833": {
      "op": "ADD"
    },
    "1834": {
      "op": "MLOAD"
    },
    "1835": {
      "op": "DUP6"
    },
    "1836": {
      "op": "DUP3"
    },
    "1837": {
      "op": "ADD"
    },
    "1838": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1840": {
      "op": "ADD"
    },
    "1841": {
      "op": "MSTORE"
    },
    "1842": {
      "op": "DUP3"
    },
    "1843": {
      "op": "ADD"
    },
    "1844": {
      "op": "PUSH2",
      "value": "0x71C"
    },
    "1847": {
      "op": "JUMP"
    },
    "1848": {
      "op": "JUMPDEST"
    },
    "1849": {
      "op": "DUP2"
    },
    "1850": {
      "op": "DUP2"
    },
    "1851": {
      "op": "GT"
    },
    "1852": {
      "op": "ISZERO"
    },
    "1853": {
      "op": "PUSH2",
      "value": "0x74A"
    },
    "1856": {
      "op": "JUMPI"
    },
    "1857": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1859": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1861": {
      "op": "DUP4"
    },
    "1862": {
      "op": "DUP8"
    },
    "1863": {
      "op": "ADD"
    },
    "1864": {
      "op": "ADD"
    },
    "1865": {
      "op": "MSTORE"
    },
    "1866": {
      "op": "JUMPDEST"
    },
    "1867": {
      "op": "POP"
    },
    "1868": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1870": {
      "op": "ADD"
    },
    "1871": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1873": {
      "op": "NOT"
    },
    "1874": {
      "op": "AND"
    },
    "1875": {
      "op": "SWAP3"
    },
    "1876": {
      "op": "SWAP1"
    },
    "1877": {
      "op": "SWAP3"
    },
    "1878": {
      "op": "ADD"
    },
    "1879": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1881": {
      "op": "ADD"
    },
    "1882": {
      "op": "SWAP4"
    },
    "1883": {
      "op": "SWAP3"
    },
    "1884": {
      "op": "POP"
    },
    "1885": {
      "op": "POP"
    },
    "1886": {
      "op": "POP"
    },
    "1887": {
      "jump": "o",
      "op": "JUMP"
    },
    "1888": {
      "op": "JUMPDEST"
    },
    "1889": {
      "op": "DUP1"
    },
    "1890": {
      "op": "CALLDATALOAD"
    },
    "1891": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1893": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1895": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1897": {
      "op": "SHL"
    },
    "1898": {
      "op": "SUB"
    },
    "1899": {
      "op": "DUP2"
    },
    "1900": {
      "op": "AND"
    },
    "1901": {
      "op": "DUP2"
    },
    "1902": {
      "op": "EQ"
    },
    "1903": {
      "op": "PUSH2",
      "value": "0x777"
    },
    "1906": {
      "op": "JUMPI"
    },
    "1907": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1909": {
      "op": "DUP1"
    },
    "1910": {
      "op": "REVERT"
    },
    "1911": {
      "op": "JUMPDEST"
    },
    "1912": {
      "op": "SWAP2"
    },
    "1913": {
      "op": "SWAP1"
    },
    "1914": {
      "op": "POP"
    },
    "1915": {
      "jump": "o",
      "op": "JUMP"
    },
    "1916": {
      "op": "JUMPDEST"
    },
    "1917": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1919": {
      "op": "DUP1"
    },
    "1920": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1922": {
      "op": "DUP4"
    },
    "1923": {
      "op": "DUP6"
    },
    "1924": {
      "op": "SUB"
    },
    "1925": {
      "op": "SLT"
    },
    "1926": {
      "op": "ISZERO"
    },
    "1927": {
      "op": "PUSH2",
      "value": "0x78F"
    },
    "1930": {
      "op": "JUMPI"
    },
    "1931": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1933": {
      "op": "DUP1"
    },
    "1934": {
      "op": "REVERT"
    },
    "1935": {
      "op": "JUMPDEST"
    },
    "1936": {
      "op": "PUSH2",
      "value": "0x798"
    },
    "1939": {
      "op": "DUP4"
    },
    "1940": {
      "op": "PUSH2",
      "value": "0x760"
    },
    "1943": {
      "jump": "i",
      "op": "JUMP"
    },
    "1944": {
      "op": "JUMPDEST"
    },
    "1945": {
      "op": "SWAP5"
    },
    "1946": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1948": {
      "op": "SWAP4"
    },
    "1949": {
      "op": "SWAP1"
    },
    "1950": {
      "op": "SWAP4"
    },
    "1951": {
      "op": "ADD"
    },
    "1952": {
      "op": "CALLDATALOAD"
    },
    "1953": {
      "op": "SWAP4"
    },
    "1954": {
      "op": "POP"
    },
    "1955": {
      "op": "POP"
    },
    "1956": {
      "op": "POP"
    },
    "1957": {
      "jump": "o",
      "op": "JUMP"
    },
    "1958": {
      "op": "JUMPDEST"
    },
    "1959": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1961": {
      "op": "DUP1"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1964": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1966": {
      "op": "DUP5"
    },
    "1967": {
      "op": "DUP7"
    },
    "1968": {
      "op": "SUB"
    },
    "1969": {
      "op": "SLT"
    },
    "1970": {
      "op": "ISZERO"
    },
    "1971": {
      "op": "PUSH2",
      "value": "0x7BB"
    },
    "1974": {
      "op": "JUMPI"
    },
    "1975": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1977": {
      "op": "DUP1"
    },
    "1978": {
      "op": "REVERT"
    },
    "1979": {
      "op": "JUMPDEST"
    },
    "1980": {
      "op": "PUSH2",
      "value": "0x7C4"
    },
    "1983": {
      "op": "DUP5"
    },
    "1984": {
      "op": "PUSH2",
      "value": "0x760"
    },
    "1987": {
      "jump": "i",
      "op": "JUMP"
    },
    "1988": {
      "op": "JUMPDEST"
    },
    "1989": {
      "op": "SWAP3"
    },
    "1990": {
      "op": "POP"
    },
    "1991": {
      "op": "PUSH2",
      "value": "0x7D2"
    },
    "1994": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1996": {
      "op": "DUP6"
    },
    "1997": {
      "op": "ADD"
    },
    "1998": {
      "op": "PUSH2",
      "value": "0x760"
    },
    "2001": {
      "jump": "i",
      "op": "JUMP"
    },
    "2002": {
      "op": "JUMPDEST"
    },
    "2003": {
      "op": "SWAP2"
    },
    "2004": {
      "op": "POP"
    },
    "2005": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2007": {
      "op": "DUP5"
    },
    "2008": {
      "op": "ADD"
    },
    "2009": {
      "op": "CALLDATALOAD"
    },
    "2010": {
      "op": "SWAP1"
    },
    "2011": {
      "op": "POP"
    },
    "2012": {
      "op": "SWAP3"
    },
    "2013": {
      "op": "POP"
    },
    "2014": {
      "op": "SWAP3"
    },
    "2015": {
      "op": "POP"
    },
    "2016": {
      "op": "SWAP3"
    },
    "2017": {
      "jump": "o",
      "op": "JUMP"
    },
    "2018": {
      "op": "JUMPDEST"
    },
    "2019": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2021": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2023": {
      "op": "DUP3"
    },
    "2024": {
      "op": "DUP5"
    },
    "2025": {
      "op": "SUB"
    },
    "2026": {
      "op": "SLT"
    },
    "2027": {
      "op": "ISZERO"
    },
    "2028": {
      "op": "PUSH2",
      "value": "0x7F4"
    },
    "2031": {
      "op": "JUMPI"
    },
    "2032": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2034": {
      "op": "DUP1"
    },
    "2035": {
      "op": "REVERT"
    },
    "2036": {
      "op": "JUMPDEST"
    },
    "2037": {
      "op": "PUSH2",
      "value": "0x7FD"
    },
    "2040": {
      "op": "DUP3"
    },
    "2041": {
      "op": "PUSH2",
      "value": "0x760"
    },
    "2044": {
      "jump": "i",
      "op": "JUMP"
    },
    "2045": {
      "op": "JUMPDEST"
    },
    "2046": {
      "op": "SWAP4"
    },
    "2047": {
      "op": "SWAP3"
    },
    "2048": {
      "op": "POP"
    },
    "2049": {
      "op": "POP"
    },
    "2050": {
      "op": "POP"
    },
    "2051": {
      "jump": "o",
      "op": "JUMP"
    },
    "2052": {
      "op": "JUMPDEST"
    },
    "2053": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2055": {
      "op": "DUP1"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2058": {
      "op": "DUP4"
    },
    "2059": {
      "op": "DUP6"
    },
    "2060": {
      "op": "SUB"
    },
    "2061": {
      "op": "SLT"
    },
    "2062": {
      "op": "ISZERO"
    },
    "2063": {
      "op": "PUSH2",
      "value": "0x817"
    },
    "2066": {
      "op": "JUMPI"
    },
    "2067": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2069": {
      "op": "DUP1"
    },
    "2070": {
      "op": "REVERT"
    },
    "2071": {
      "op": "JUMPDEST"
    },
    "2072": {
      "op": "PUSH2",
      "value": "0x820"
    },
    "2075": {
      "op": "DUP4"
    },
    "2076": {
      "op": "PUSH2",
      "value": "0x760"
    },
    "2079": {
      "jump": "i",
      "op": "JUMP"
    },
    "2080": {
      "op": "JUMPDEST"
    },
    "2081": {
      "op": "SWAP2"
    },
    "2082": {
      "op": "POP"
    },
    "2083": {
      "op": "PUSH2",
      "value": "0x82E"
    },
    "2086": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2088": {
      "op": "DUP5"
    },
    "2089": {
      "op": "ADD"
    },
    "2090": {
      "op": "PUSH2",
      "value": "0x760"
    },
    "2093": {
      "jump": "i",
      "op": "JUMP"
    },
    "2094": {
      "op": "JUMPDEST"
    },
    "2095": {
      "op": "SWAP1"
    },
    "2096": {
      "op": "POP"
    },
    "2097": {
      "op": "SWAP3"
    },
    "2098": {
      "op": "POP"
    },
    "2099": {
      "op": "SWAP3"
    },
    "2100": {
      "op": "SWAP1"
    },
    "2101": {
      "op": "POP"
    },
    "2102": {
      "jump": "o",
      "op": "JUMP"
    },
    "2103": {
      "op": "JUMPDEST"
    },
    "2104": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2106": {
      "op": "DUP2"
    },
    "2107": {
      "op": "DUP2"
    },
    "2108": {
      "op": "SHR"
    },
    "2109": {
      "op": "SWAP1"
    },
    "2110": {
      "op": "DUP3"
    },
    "2111": {
      "op": "AND"
    },
    "2112": {
      "op": "DUP1"
    },
    "2113": {
      "op": "PUSH2",
      "value": "0x84B"
    },
    "2116": {
      "op": "JUMPI"
    },
    "2117": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2119": {
      "op": "DUP3"
    },
    "2120": {
      "op": "AND"
    },
    "2121": {
      "op": "SWAP2"
    },
    "2122": {
      "op": "POP"
    },
    "2123": {
      "op": "JUMPDEST"
    },
    "2124": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2126": {
      "op": "DUP3"
    },
    "2127": {
      "op": "LT"
    },
    "2128": {
      "op": "DUP2"
    },
    "2129": {
      "op": "SUB"
    },
    "2130": {
      "op": "PUSH2",
      "value": "0x86B"
    },
    "2133": {
      "op": "JUMPI"
    },
    "2134": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2139": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2141": {
      "op": "SHL"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2144": {
      "op": "MSTORE"
    },
    "2145": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2147": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2149": {
      "op": "MSTORE"
    },
    "2150": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2152": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2154": {
      "op": "REVERT"
    },
    "2155": {
      "op": "JUMPDEST"
    },
    "2156": {
      "op": "POP"
    },
    "2157": {
      "op": "SWAP2"
    },
    "2158": {
      "op": "SWAP1"
    },
    "2159": {
      "op": "POP"
    },
    "2160": {
      "jump": "o",
      "op": "JUMP"
    },
    "2161": {
      "op": "JUMPDEST"
    },
    "2162": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2164": {
      "op": "DUP3"
    },
    "2165": {
      "op": "NOT"
    },
    "2166": {
      "op": "DUP3"
    },
    "2167": {
      "op": "GT"
    },
    "2168": {
      "op": "ISZERO"
    },
    "2169": {
      "op": "PUSH2",
      "value": "0x892"
    },
    "2172": {
      "op": "JUMPI"
    },
    "2173": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2178": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2180": {
      "op": "SHL"
    },
    "2181": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2183": {
      "op": "MSTORE"
    },
    "2184": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2186": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2188": {
      "op": "MSTORE"
    },
    "2189": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2191": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2193": {
      "op": "REVERT"
    },
    "2194": {
      "op": "JUMPDEST"
    },
    "2195": {
      "op": "POP"
    },
    "2196": {
      "op": "ADD"
    },
    "2197": {
      "op": "SWAP1"
    },
    "2198": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "e475ab379ef558b9af0280c07b06144b22b1a3d5",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./common/meta-transactions/ContentMixin.sol\";\nimport \"./common/meta-transactions/NativeMetaTransaction.sol\";\n\ncontract OwnableDelegateProxy {}\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\n\ncontract Weth is ERC20 {\n    constructor() ERC20(\"Weth\", \"WETH\") {\n        _mint(msg.sender, 1000 * 10**uint256(decimals()));\n    }\n}\n\ncontract deployed {\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool) {}\n}\n\n// W3rdle smart contract\ncontract W3rdl3 is\n    ERC721URIStorage,\n    Ownable,\n    ContextMixin,\n    NativeMetaTransaction\n{\n    using Counters for Counters.Counter;\n    Counters.Counter public _tokenId;\n\n    uint256 public ongoingMintPrice;\n    address proxyRegistryAddress;\n    mapping(address => bool) public minterMap;\n    mapping(bytes5 => bool) public wordMap;\n    mapping(uint8 => uint256) private rebates;\n    string private baseURI;\n    Weth weth;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        string memory _baseURI,\n        uint256 _ongoingMintPrice,\n        address _wethAddress,\n        address _proxyRegistryAddress\n    ) ERC721(_name, _symbol) {\n        baseURI = _baseURI;\n        ongoingMintPrice = _ongoingMintPrice;\n        weth = Weth(_wethAddress);\n        _tokenId.increment();\n        _initializeEIP712(_name);\n\n        proxyRegistryAddress = _proxyRegistryAddress;\n\n        rebates[1] = 0.0005 ether;\n        rebates[2] = 0.0004 ether;\n        rebates[3] = 0.0003 ether;\n        rebates[4] = 0.0002 ether;\n        rebates[5] = 0.0001 ether;\n    }\n\n    function mintPriceCheck() internal {\n        if (_tokenId.current() & 0x3FF == 0) {\n            ongoingMintPrice += 0.001 ether;\n        }\n    }\n\n    function register() public payable {\n        require(\n            weth.transferFrom(tx.origin, address(this), ongoingMintPrice),\n            \"Failed: Please pay the appropriate ONGOINT_MINT_PRICE fee\"\n        );\n        minterMap[msg.sender] = true;\n        mintPriceCheck();\n    }\n\n    function mintWord(uint8 tries, bytes5 word)\n        public\n        payable\n        returns (uint256)\n    {\n        require(\n            minterMap[msg.sender] == true,\n            \"Player not allowed to mint. Please pay the appropriate ONGOINT_MINT_PRICE fee before minting\"\n        );\n        require(\n            wordMap[word] == false,\n            \"The word has already been minted by another player\"\n        );\n        require(msg.sender == tx.origin, \"No Bots\"); // block smart contracts from minting\n\n        minterMap[msg.sender] = false;\n        wordMap[word] = true;\n\n        uint256 newItemId = _tokenId.current();\n        string memory _tokenURI;\n\n        _tokenId.increment();\n        _tokenURI = string(bytes.concat(bytes(baseURI), word, \"-config.json\"));\n\n        _safeMint(msg.sender, newItemId);\n        _setTokenURI(newItemId, _tokenURI);\n\n        if (rebates[tries] > 0) {\n            payable(msg.sender).transfer(rebates[tries]);\n        }\n        return newItemId;\n    }\n\n    function withdraw(uint256 amount) public payable onlyOwner {\n        payable(msg.sender).transfer(amount);\n    }\n\n    function withdrawAll() public payable onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    // Override approval to save gas\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n        if (address(proxyRegistry.proxies(owner)) == operator) {\n            return true;\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n\n    // Make opensea proxy pay for some txns\n    function _msgSender() internal view override returns (address sender) {\n        return ContextMixin.msgSender();\n    }\n}\n\n//  \u2588\u2588\u2580\u2588\u2588\u2588   \u2588\u2588\u2593  \u2584\u2588\u2588\u2588\u2588  \u2592\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2580\u2588\u2588\u2588   \u2588\u2588\u2593 \u2588\u2588\u2593     \u2588\u2588\u2593    \u2584\u2584\u2584\n// \u2593\u2588\u2588 \u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592 \u2588\u2588\u2592 \u2580\u2588\u2592\u2592\u2588\u2588\u2592  \u2588\u2588\u2592\u2593\u2588\u2588 \u2592 \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2593\u2588\u2588\u2592    \u2593\u2588\u2588\u2592   \u2592\u2588\u2588\u2588\u2588\u2584\n// \u2593\u2588\u2588 \u2591\u2584\u2588 \u2592\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591\u2592\u2588\u2588\u2591  \u2588\u2588\u2592\u2593\u2588\u2588 \u2591\u2584\u2588 \u2592\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591    \u2592\u2588\u2588\u2591   \u2592\u2588\u2588  \u2580\u2588\u2584\n// \u2592\u2588\u2588\u2580\u2580\u2588\u2584  \u2591\u2588\u2588\u2591\u2591\u2593\u2588  \u2588\u2588\u2593\u2592\u2588\u2588   \u2588\u2588\u2591\u2592\u2588\u2588\u2580\u2580\u2588\u2584  \u2591\u2588\u2588\u2591\u2592\u2588\u2588\u2591    \u2592\u2588\u2588\u2591   \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\n// \u2591\u2588\u2588\u2593 \u2592\u2588\u2588\u2592\u2591\u2588\u2588\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2588\u2588\u2593 \u2592\u2588\u2588\u2592\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2593\u2588   \u2593\u2588\u2588\u2592\n// \u2591 \u2592\u2593 \u2591\u2592\u2593\u2591\u2591\u2593   \u2591\u2592   \u2592 \u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2592\u2593 \u2591\u2592\u2593\u2591\u2591\u2593  \u2591 \u2592\u2591\u2593  \u2591\u2591 \u2592\u2591\u2593  \u2591\u2592\u2592   \u2593\u2592\u2588\u2591\n//   \u2591\u2592 \u2591 \u2592\u2591 \u2592 \u2591  \u2591   \u2591   \u2591 \u2592 \u2592\u2591   \u2591\u2592 \u2591 \u2592\u2591 \u2592 \u2591\u2591 \u2591 \u2592  \u2591\u2591 \u2591 \u2592  \u2591 \u2592   \u2592\u2592 \u2591\n//   \u2591\u2591   \u2591  \u2592 \u2591\u2591 \u2591   \u2591 \u2591 \u2591 \u2591 \u2592    \u2591\u2591   \u2591  \u2592 \u2591  \u2591 \u2591     \u2591 \u2591    \u2591   \u2592\n//    \u2591      \u2591        \u2591     \u2591 \u2591     \u2591      \u2591      \u2591  \u2591    \u2591  \u2591     \u2591  \u2591\n",
  "sourceMap": "599:133:16:-:0;;;628:102;;;;;;;;;;1978:113:1;;;;;;;;;;;;;-1:-1:-1;;;1978:113:1;;;;;;;;;;;;;;;;-1:-1:-1;;;1978:113:1;;;2052:5;2044;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2067:17:1;;;;:7;;:17;;;;;:::i;:::-;;1978:113;;674:49:16::1;680:10;711;:8;;;:10;;:::i;:::-;699:23;::::0;703:19:::1;;699:2;:23;:::i;:::-;692:30;::::0;:4:::1;:30;:::i;:::-;674:5;:49::i;:::-;599:133:::0;;3093:91:1;3175:2;;3093:91::o;8415:389::-;-1:-1:-1;;;;;8498:21:1;;8490:65;;;;-1:-1:-1;;;8490:65:1;;1895:2:21;8490:65:1;;;1877:21:21;1934:2;1914:18;;;1907:30;1973:33;1953:18;;;1946:61;2024:18;;8490:65:1;;;;;;;;8642:6;8626:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8658:18:1;;:9;:18;;;;;;;;;;:28;;8680:6;;8658:9;:28;;8680:6;;8658:28;:::i;:::-;;;;-1:-1:-1;;8701:37:1;;2332:25:21;;;-1:-1:-1;;;;;8701:37:1;;;8718:1;;8701:37;;2320:2:21;2305:18;8701:37:1;;;;;;;8415:389;;:::o;599:133:16:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;599:133:16;;;-1:-1:-1;599:133:16;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:21;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:422;235:1;278:5;235:1;292:270;313:7;303:8;300:21;292:270;;;372:4;368:1;364:6;360:17;354:4;351:27;348:53;;;381:18;;:::i;:::-;431:7;421:8;417:22;414:55;;;451:16;;;;414:55;530:22;;;;490:15;;;;292:270;;;296:3;146:422;;;;;:::o;573:806::-;622:5;652:8;642:80;;-1:-1:-1;693:1:21;707:5;;642:80;741:4;731:76;;-1:-1:-1;778:1:21;792:5;;731:76;823:4;841:1;836:59;;;;909:1;904:130;;;;816:218;;836:59;866:1;857:10;;880:5;;;904:130;941:3;931:8;928:17;925:43;;;948:18;;:::i;:::-;-1:-1:-1;;1004:1:21;990:16;;1019:5;;816:218;;1118:2;1108:8;1105:16;1099:3;1093:4;1090:13;1086:36;1080:2;1070:8;1067:16;1062:2;1056:4;1053:12;1049:35;1046:77;1043:159;;;-1:-1:-1;1155:19:21;;;1187:5;;1043:159;1234:34;1259:8;1253:4;1234:34;:::i;:::-;1304:6;1300:1;1296:6;1292:19;1283:7;1280:32;1277:58;;;1315:18;;:::i;:::-;1353:20;;-1:-1:-1;573:806:21;;;;;:::o;1384:131::-;1444:5;1473:36;1500:8;1494:4;1473:36;:::i;:::-;1464:45;1384:131;-1:-1:-1;;;1384:131:21:o;1520:168::-;1560:7;1626:1;1622;1618:6;1614:14;1611:1;1608:21;1603:1;1596:9;1589:17;1585:45;1582:71;;;1633:18;;:::i;:::-;-1:-1:-1;1673:9:21;;1520:168::o;2053:128::-;2093:3;2124:1;2120:6;2117:1;2114:13;2111:39;;;2130:18;;:::i;:::-;-1:-1:-1;2166:9:21;;2053:128::o;2368:380::-;2447:1;2443:12;;;;2490;;;2511:61;;2565:4;2557:6;2553:17;2543:27;;2511:61;2618:2;2610:6;2607:14;2587:18;2584:38;2581:161;;2664:10;2659:3;2655:20;2652:1;2645:31;2699:4;2696:1;2689:15;2727:4;2724:1;2717:15;2581:161;;2368:380;;;:::o;:::-;599:133:16;;;;;;",
  "sourcePath": "contracts/W3rdl3.sol",
  "type": "contract"
}